<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2014r1" FormatVersion="2" MinIDEVersion="20070100">
<block type="Project" ID="0">
 <ProjectSavedInVers>2014.01</ProjectSavedInVers>
 <ProjMgrUser></ProjMgrUser>
 <ProjMgrServer></ProjMgrServer>
 <MajorVersion>1</MajorVersion>
 <MinorVersion>0</MinorVersion>
 <SubVersion>0</SubVersion>
 <Release>0</Release>
 <NonRelease>26</NonRelease>
 <Region></Region>
 <ShortVersion></ShortVersion>
 <LongVersion></LongVersion>
 <InfoVersion></InfoVersion>
 <AutoIncVersion>1</AutoIncVersion>
 <DefaultViewID>1541412863</DefaultViewID>
 <ProjectType>0</ProjectType>
 <DefaultLanguage>0</DefaultLanguage>
 <CurrentLanguage>0</CurrentLanguage>
 <DefaultEncoding>0</DefaultEncoding>
 <BuildFlags>26896</BuildFlags>
 <UseBuildsFolder>1</UseBuildsFolder>
 <WebApp>0</WebApp>
 <Icon>
 </Icon>
 <MacCreator></MacCreator>
 <BuildCarbonName>My Application</BuildCarbonName>
 <BuildCarbonMachOName>VectorJam</BuildCarbonMachOName>
 <BundleIdentifier>com.x3.vectorjam</BundleIdentifier>
 <BuildSize>0</BuildSize>
 <BuildMinSize>0</BuildMinSize>
 <BuildSizeAsString></BuildSizeAsString>
 <BuildMinSizeAsString></BuildMinSizeAsString>
 <WinMDICaption></WinMDICaption>
 <BuildWinName>VectorJam.exe</BuildWinName>
 <BuildWinMDI>0</BuildWinMDI>
 <BuildWinCompanyName></BuildWinCompanyName>
 <BuildWinProductName></BuildWinProductName>
 <BuildWinInternalName></BuildWinInternalName>
 <BuildWinFileDescription></BuildWinFileDescription>
 <UseGDIPlus>0</UseGDIPlus>
 <BuildLinuxX86Name>VectorJam</BuildLinuxX86Name>
 <DebuggerCommandLine></DebuggerCommandLine>
 <WebPort>0</WebPort>
 <WebSecurePort>443</WebSecurePort>
 <WebProtocol>0</WebProtocol>
 <WebDebugPort>8080</WebDebugPort>
 <WebUseIntegratedBrowser>0</WebUseIntegratedBrowser>
 <WebLaunchString>Launching...</WebLaunchString>
 <WebHTMLHeader></WebHTMLHeader>
 <WebDisconnectString>The application has gone off-line. Please try again later.</WebDisconnectString>
 <WebHostingIdentifier></WebHostingIdentifier>
 <WebHostingAppName>MyApplication</WebHostingAppName>
</block>
<block type="Module" ID="1999771647">
 <ObjName>App</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Application</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <IsApplicationObject>1</IsApplicationObject>
 <Compatibility></Compatibility>
 <PropertyVal Name="MenuBar"><Hex bytes="1">30</Hex></PropertyVal>
 <ViewBehavior>
 </ViewBehavior>
 <Constant>
  <ItemName>kEditClear</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kEditClear</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>&amp;Delete</ItemDef>
  <ItemFlags>0</ItemFlags>
  <ConstantInstance>
   <ItemPlatform>2</ItemPlatform>
   <ItemLanguage>0</ItemLanguage>
   <ItemDef>&amp;Delete</ItemDef>
  </ConstantInstance>
  <ConstantInstance>
   <ItemPlatform>5</ItemPlatform>
   <ItemLanguage>0</ItemLanguage>
   <ItemDef>&amp;Delete</ItemDef>
  </ConstantInstance>
 </Constant>
 <Constant>
  <ItemName>kFileQuit</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kFileQuit</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>&amp;Quit</ItemDef>
  <ItemFlags>0</ItemFlags>
  <ConstantInstance>
   <ItemPlatform>2</ItemPlatform>
   <ItemLanguage>0</ItemLanguage>
   <ItemDef>E&amp;xit</ItemDef>
  </ConstantInstance>
 </Constant>
 <Constant>
  <ItemName>kFileQuitShortcut</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>kFileQuitShortcut</ItemName>
  <ItemType>0</ItemType>
  <ItemDef></ItemDef>
  <ItemFlags>0</ItemFlags>
  <ConstantInstance>
   <ItemPlatform>1</ItemPlatform>
   <ItemLanguage>0</ItemLanguage>
   <ItemDef>Cmd+Q</ItemDef>
  </ConstantInstance>
  <ConstantInstance>
   <ItemPlatform>5</ItemPlatform>
   <ItemLanguage>0</ItemLanguage>
   <ItemDef>Ctrl+Q</ItemDef>
  </ConstantInstance>
 </Constant>
</block>
<block type="Toolbar" ID="392247295">
 <ObjName>MainToolbar</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Toolbar</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Attributes></Attributes>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>100</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Enabled</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>InitialParent</ObjName>
   <ItemType>String</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Window" ID="1541412863">
 <ObjName>MainWindow</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Window</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>KeyDown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function KeyDown(Key As String) As Boolean</SourceLine>
   <SourceLine>select case Asc(Key)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case 1 ' Ctrl+A</SourceLine>
   <SourceLine>action_SelectAll</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case 26 ' Ctrl+Z</SourceLine>
   <SourceLine>action_Undo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case 27 ' esc</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if EditState &lt;&gt; VectorJam.EditStateEnum.Start then</SourceLine>
   <SourceLine>EditState = VectorJam.EditStateEnum.Start</SourceLine>
   <SourceLine>action_Undo</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case 32 ' space</SourceLine>
   <SourceLine>action_DeselectAll</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case 43 ' + (zoom in)</SourceLine>
   <SourceLine>action_ZoomIn</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case 45 ' - (zoom out)</SourceLine>
   <SourceLine>action_ZoomOut</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case 127 ' del</SourceLine>
   <SourceLine>action_DeleteSelectedPolygons</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'case else</SourceLine>
   <SourceLine>'msgbox str(asc(key))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>Open</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Open()</SourceLine>
   <SourceLine>Self.Maximize()</SourceLine>
   <SourceLine>Self.MouseCursor = System.Cursors.StandardPointer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loadToolbar</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>action_New</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <Method>
  <ItemName>action_CenterModel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_CenterModel()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>CurrentModel.Center()</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_DeleteSelectedPolygons</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_DeleteSelectedPolygons()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_DeleteSelectedPolygons CurrentModel</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_DeselectAll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_DeselectAll()</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim foundSelect As Boolean</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if (CurrentModel &lt;&gt; nil)  then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if EditState = EditStateEnum.Start then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>foundSelect = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to CurrentModel.Polygon.Ubound</SourceLine>
   <SourceLine>poly = CurrentModel.Polygon(i)</SourceLine>
   <SourceLine>if poly.Selected then</SourceLine>
   <SourceLine>foundSelect = true</SourceLine>
   <SourceLine>poly.Selected = False</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if foundSelect then</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_ExtrudeNormal</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_ExtrudeNormal()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>EditState = EditStateEnum.ExtrudeNormal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_StartExtrude CurrentModel</SourceLine>
   <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_ExtrudeX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_ExtrudeX()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>EditState = EditStateEnum.ExtrudeX</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_StartExtrude CurrentModel</SourceLine>
   <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_ExtrudeY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_ExtrudeY()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>EditState = EditStateEnum.ExtrudeY</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_StartExtrude CurrentModel</SourceLine>
   <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_ExtrudeZ</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_ExtrudeZ()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>EditState = EditStateEnum.ExtrudeZ</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_StartExtrude CurrentModel</SourceLine>
   <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_Insert_Cube</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_Insert_Cube()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_Insert_Cube CurrentModel</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_MoveNormal</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_MoveNormal()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>EditState = EditStateEnum.MoveNormal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_StartMove CurrentModel</SourceLine>
   <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_MoveX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_MoveX()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>EditState = EditStateEnum.MoveX</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_StartMove CurrentModel</SourceLine>
   <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_MoveY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_MoveY()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>EditState = EditStateEnum.MoveY</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_StartMove CurrentModel</SourceLine>
   <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_MoveZ</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_MoveZ()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>EditState = EditStateEnum.MoveZ</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_StartMove CurrentModel</SourceLine>
   <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_New</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_New()</SourceLine>
   <SourceLine>CurrentModel = new X3Core.X3Model</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_Open</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_Open()</SourceLine>
   <SourceLine>Dim dlg As new OpenDialog</SourceLine>
   <SourceLine>Dim modelFile As FolderItem</SourceLine>
   <SourceLine>Dim x3mType As new FileType</SourceLine>
   <SourceLine>Dim io As new X3Core.X3IO</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>x3mType.Name = "X3 Model" ' create X3 Model type</SourceLine>
   <SourceLine>x3mType.Extensions = ".x3m"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dlg.Filter = x3mType</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelFile = dlg.ShowModal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if modelFile &lt;&gt; nil then</SourceLine>
   <SourceLine>CurrentModel = io.LoadModel(modelFile)</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_Save</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_Save()</SourceLine>
   <SourceLine>Dim dlg As new SaveAsDialog</SourceLine>
   <SourceLine>Dim modelFile As FolderItem</SourceLine>
   <SourceLine>Dim x3mType As new FileType</SourceLine>
   <SourceLine>Dim io As new X3Core.X3IO</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if CurrentModel &lt;&gt; nil then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>x3mType.Name = "X3 Model" ' create X3 Model type</SourceLine>
   <SourceLine>x3mType.Extensions = ".x3m"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dlg.Filter = x3mType ' assign type to dialog</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelFile = dlg.ShowModal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if modelFile &lt;&gt; nil then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if Right(modelFile.Name, 4) &lt;&gt; ".x3m" then</SourceLine>
   <SourceLine>modelFile.Name = modelFile.Name + ".x3m"</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>io.SaveModel modelFile, CurrentModel</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_ScaleUniform</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_ScaleUniform()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>EditState = EditStateEnum.ScaleUniform</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_StartScale CurrentModel</SourceLine>
   <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_ScaleX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_ScaleX()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>EditState = EditStateEnum.ScaleX</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_StartScale CurrentModel</SourceLine>
   <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_ScaleY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_ScaleY()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>EditState = EditStateEnum.ScaleY</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_StartScale CurrentModel</SourceLine>
   <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_ScaleZ</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_ScaleZ()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>EditState = EditStateEnum.ScaleZ</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_StartScale CurrentModel</SourceLine>
   <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_SelectAll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_SelectAll()</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if CurrentModel &lt;&gt; nil then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to CurrentModel.Polygon.Ubound</SourceLine>
   <SourceLineBreakpoint>6</SourceLineBreakpoint>
   <SourceLine>poly = CurrentModel.Polygon(i)</SourceLine>
   <SourceLine>poly.Selected = True</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_Undo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_Undo()</SourceLine>
   <SourceLine>Dim currentRotation As X3Core.X3Quaternion</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if UndoStack.Ubound &gt;= 0 then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>currentRotation = new X3Core.X3Quaternion(CurrentModel.Rotation.W, CurrentModel.Rotation.X, CurrentModel.Rotation.Y, CurrentModel.Rotation.Z)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>CurrentModel = UndoStack(UndoStack.Ubound)</SourceLine>
   <SourceLine>CurrentModel.Rotation = currentRotation</SourceLine>
   <SourceLine>UndoStack.Remove(UndoStack.Ubound)</SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_UnitizeModel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_UnitizeModel()</SourceLine>
   <SourceLine>StoreUndo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>CurrentModel.Unitize()</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>CurrentModel.Invalidate = true</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_ZoomIn</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_ZoomIn()</SourceLine>
   <SourceLine>zZoom = zZoom + 1</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>action_ZoomOut</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub action_ZoomOut()</SourceLine>
   <SourceLine>zZoom = zZoom - 1</SourceLine>
   <SourceLine>Surface.Render</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>loadToolbar</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub loadToolbar()</SourceLine>
   <SourceLine>Dim button As ToolButton</SourceLine>
   <SourceLine>Dim dropMenu As MenuItem</SourceLine>
   <SourceLine>Dim dropItem As MenuItem</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' New</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>button = new ToolButton</SourceLine>
   <SourceLine>button.Name = "toolNew"</SourceLine>
   <SourceLine>button.Style = ToolButton.ToolStylePushButton</SourceLine>
   <SourceLine>button.Caption = "New"</SourceLine>
   <SourceLine>'button.Icon = icon_users</SourceLine>
   <SourceLine>tbMain.Append button</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' Open</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>button = new ToolButton</SourceLine>
   <SourceLine>button.Name = "toolOpen"</SourceLine>
   <SourceLine>button.Style = ToolButton.ToolStylePushButton</SourceLine>
   <SourceLine>button.Caption = "Open"</SourceLine>
   <SourceLine>'button.Icon = icon_users</SourceLine>
   <SourceLine>tbMain.Append button</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' Save</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>button = new ToolButton</SourceLine>
   <SourceLine>button.Name = "toolSave"</SourceLine>
   <SourceLine>button.Style = ToolButton.ToolStylePushButton</SourceLine>
   <SourceLine>button.Caption = "Save"</SourceLine>
   <SourceLine>'button.Icon = icon_users</SourceLine>
   <SourceLine>tbMain.Append button</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' Insert</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>button = new ToolButton</SourceLine>
   <SourceLine>button.Name = "toolInsert"</SourceLine>
   <SourceLine>button.Style = ToolButton.ToolStyleDropDown</SourceLine>
   <SourceLine>button.Caption = "Insert..."</SourceLine>
   <SourceLine>'button.Icon = icon_apps</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dropMenu = new MenuItem</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dropItem = new MenuItem("Cube")</SourceLine>
   <SourceLine>dropItem.Name = "toolInsert_Cube"</SourceLine>
   <SourceLine>dropMenu.Append dropItem</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>button.DropDownMenu = dropMenu</SourceLine>
   <SourceLine>tbMain.Append button</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' Zoom In</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>button = new ToolButton</SourceLine>
   <SourceLine>button.Name = "toolZoomIn"</SourceLine>
   <SourceLine>button.Style = ToolButton.ToolStylePushButton</SourceLine>
   <SourceLine>button.Caption = "Zoom In"</SourceLine>
   <SourceLine>'button.Icon = icon_users</SourceLine>
   <SourceLine>tbMain.Append button</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' Zoom Out</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>button = new ToolButton</SourceLine>
   <SourceLine>button.Name = "toolZoomOut"</SourceLine>
   <SourceLine>button.Style = ToolButton.ToolStylePushButton</SourceLine>
   <SourceLine>button.Caption = "Zoom Out"</SourceLine>
   <SourceLine>'button.Icon = icon_users</SourceLine>
   <SourceLine>tbMain.Append button</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' Preview</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>button = new ToolButton</SourceLine>
   <SourceLine>button.Name = "toolPreview"</SourceLine>
   <SourceLine>button.Style = ToolButton.ToolStyleToggleButton</SourceLine>
   <SourceLine>button.Caption = "Preview"</SourceLine>
   <SourceLine>'button.Icon = icon_users</SourceLine>
   <SourceLine>tbMain.Append button</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>StoreUndo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub StoreUndo()</SourceLine>
   <SourceLine>UndoStack.Append CurrentModel.Clone</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>CurrentModel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CurrentModel As X3Core.X3Model</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CurrentModel As X3Core.X3Model</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>DraggedMouse</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DraggedMouse As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DraggedMouse As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>MousePrevX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>MousePrevX As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>MousePrevX As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>MousePrevY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>MousePrevY As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>MousePrevY As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Preview</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Preview As Boolean = False</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Preview As Boolean = False</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>UndoStack()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>UndoStack() As X3Core.X3Model</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>UndoStack() As X3Core.X3Model</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>zZoom</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>zZoom As Double = -5</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>zZoom As Double = -5</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <PropertyVal Name="ImplicitInstance">True</PropertyVal>
 <PropertyVal Name="MenuBar">1657622527</PropertyVal>
 <PropertyVal Name="MacProcID"><Hex bytes="1">30</Hex></PropertyVal>
 <PropertyVal Name="FullScreenButton">False</PropertyVal>
 <PropertyVal Name="MinimizeButton">True</PropertyVal>
 <PropertyVal Name="MaximizeButton">True</PropertyVal>
 <PropertyVal Name="LiveResize">True</PropertyVal>
 <PropertyVal Name="Resizeable">True</PropertyVal>
 <PropertyVal Name="CloseButton">True</PropertyVal>
 <PropertyVal Name="MenuBarVisible">True</PropertyVal>
 <PropertyVal Name="FullScreen">False</PropertyVal>
 <PropertyVal Name="Visible">True</PropertyVal>
 <PropertyVal Name="Title">X3 VectorJam</PropertyVal>
 <PropertyVal Name="Backdrop">0</PropertyVal>
 <PropertyVal Name="BackColor"><Hex bytes="8">3136373737323135</Hex></PropertyVal>
 <PropertyVal Name="HasBackColor">False</PropertyVal>
 <PropertyVal Name="Composite">False</PropertyVal>
 <PropertyVal Name="Frame"><Hex bytes="1">30</Hex></PropertyVal>
 <PropertyVal Name="MaxHeight"><Hex bytes="5">3332303030</Hex></PropertyVal>
 <PropertyVal Name="MaxWidth"><Hex bytes="5">3332303030</Hex></PropertyVal>
 <PropertyVal Name="MinHeight"><Hex bytes="2">3634</Hex></PropertyVal>
 <PropertyVal Name="MinWidth"><Hex bytes="2">3634</Hex></PropertyVal>
 <PropertyVal Name="Height"><Hex bytes="3">343030</Hex></PropertyVal>
 <PropertyVal Name="Width"><Hex bytes="3">363030</Hex></PropertyVal>
 <PropertyVal Name="Placement"><Hex bytes="1">30</Hex></PropertyVal>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>BackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>&amp;hFFFFFF</PropertyValue>
   <ItemType>Color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Backdrop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Picture</ItemType>
   <EditorType>Picture</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CloseButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Composite</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DraggedMouse</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Frame</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <Enumeration>
    <ItemDef>0 - Document</ItemDef>
    <ItemDef>1 - Movable Modal</ItemDef>
    <ItemDef>2 - Modal Dialog</ItemDef>
    <ItemDef>3 - Floating Window</ItemDef>
    <ItemDef>4 - Plain Box</ItemDef>
    <ItemDef>5 - Shadowed Box</ItemDef>
    <ItemDef>6 - Rounded Window</ItemDef>
    <ItemDef>7 - Global Floating Window</ItemDef>
    <ItemDef>8 - Sheet Window</ItemDef>
    <ItemDef>9 - Metal Window</ItemDef>
    <ItemDef>10 - Drawer Window</ItemDef>
    <ItemDef>11 - Modeless Dialog</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>FullScreen</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>FullScreenButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HasBackColor</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>400</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ImplicitInstance</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Interfaces</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LiveResize</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MacProcID</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxHeight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32000</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaximizeButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MaxWidth</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>32000</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MenuBar</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>MenuBar</ItemType>
   <EditorType>MenuBar</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MenuBarVisible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinHeight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>64</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinimizeButton</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MinWidth</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>64</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MousePrevX</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MousePrevY</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Placement</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
   <EditorType>Enum</EditorType>
   <Enumeration>
    <ItemDef>0 - Default</ItemDef>
    <ItemDef>1 - Parent Window</ItemDef>
    <ItemDef>2 - Main Screen</ItemDef>
    <ItemDef>3 - Parent Window Screen</ItemDef>
    <ItemDef>4 - Stagger</ItemDef>
   </Enumeration>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Preview</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Resizeable</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Title</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>Untitled</PropertyValue>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>600</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>zZoom</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>-5</PropertyValue>
   <ItemType>Double</ItemType>
  </ViewProperty>
 </ViewBehavior>
 <ControlBehavior>
  <Superclass>OpenGLSurface</Superclass>
  <HookInstance>
   <ItemName>Open</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Open()</SourceLine>
    <SourceLine>VJ_Initialize ' initalize OpenGL environment</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>Dim l as new X3Core.X3Light(0, 0.5, 1)</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>X3_EnableLight OpenGL.GL_LIGHT0, l ' add a light source to our scene</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>MouseDrag</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub MouseDrag(x as Integer, y as Integer)</SourceLine>
    <SourceLine>' www.Xojo3D.com</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>' apply a pitch and yaw rotation using the mouse x and y movement</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>if CurrentModel &lt;&gt; nil then</SourceLine>
    <SourceLine>X3_RotateWithXY CurrentModel.Rotation, (y - MousePrevY), (x - MousePrevX)</SourceLine>
    <SourceLine>Surface.Render ' refresh the OpenGL surface</SourceLine>
    <SourceLine>end if</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>if (abs(x - MousePrevX) &gt; 2) or (abs(y - MousePrevY) &gt; 2) then</SourceLine>
    <SourceLine>DraggedMouse = true</SourceLine>
    <SourceLine>end if</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>' save mouse position</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>MousePrevX = x</SourceLine>
    <SourceLine>MousePrevY = y</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>MouseDown</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Function MouseDown(x as Integer, y as Integer) As Boolean</SourceLine>
    <SourceLine>' www.Xojo3D.com</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>if not IsContextualClick then</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>select case EditState</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.ExtrudeNormal, EditStateEnum.ExtrudeX, EditStateEnum.ExtrudeY, EditStateEnum.ExtrudeZ</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>VJ_CommitExtrude CurrentModel</SourceLine>
    <SourceLine>EditState = EditStateEnum.Start</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.MoveNormal, EditStateEnum.MoveX, EditStateEnum.MoveY, EditStateEnum.MoveZ</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>VJ_CommitMove CurrentModel</SourceLine>
    <SourceLine>EditState = EditStateEnum.Start</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.ScaleUniform, EditStateEnum.ScaleX, EditStateEnum.ScaleY, EditStateEnum.ScaleZ</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>VJ_CommitScale CurrentModel</SourceLine>
    <SourceLine>EditState = EditStateEnum.Start</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.Start</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>DraggedMouse = false</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>MousePrevX = x ' save mouse position</SourceLine>
    <SourceLine>MousePrevY = y</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>return true</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>end select</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>end if</SourceLine>
    <SourceLine>End Function</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>Render</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Function Render() As Boolean</SourceLine>
    <SourceLine>' clear the background</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>OpenGL.glClearColor(0.2, 0.2, 0.2, 1) ' set the background color</SourceLine>
    <SourceLine>OpenGL.glClear(OpenGL.GL_COLOR_BUFFER_BIT + OpenGL.GL_DEPTH_BUFFER_BIT) ' clear the background and depth buffer</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>' render current model</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>if CurrentModel &lt;&gt; nil then</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>OpenGL.glPushMatrix ' save matrix</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>OpenGL.glTranslatef 0, 0, zZoom ' move back so that the cube is in our field of view</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>if Preview then</SourceLine>
    <SourceLine>X3_RenderModel CurrentModel ' render model with X3 engine</SourceLine>
    <SourceLine>else</SourceLine>
    <SourceLine>VJ_RenderMesh CurrentModel, EditState ' render model with VectorJam rendering engine</SourceLine>
    <SourceLine>end if</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>OpenGL.glPopMatrix ' restore matrix</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>end if</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine></SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>End Function</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>Resized</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Resized()</SourceLine>
    <SourceLine>' www.Xojo3D.com</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>X3_SetPerspective Surface, 60, 0.0001, 10000 ' intialize our perspective settings</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>MouseUp</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub MouseUp(x as Integer, y as Integer)</SourceLine>
    <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>if not DraggedMouse then</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>if (CurrentModel &lt;&gt; nil) and not Preview then</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>Surface.MakeCurrent()</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>OpenGL.glPushMatrix ' save matrix</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>OpenGL.glTranslatef 0, 0, zZoom ' move back so that the cube is in our field of view</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>poly = X3_PickPolygon(CurrentModel, x, Surface.Height - y)</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>OpenGL.glPopMatrix ' restore matrix</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>if poly &lt;&gt; nil then</SourceLine>
    <SourceLine>poly.Selected = not poly.Selected</SourceLine>
    <SourceLine>CurrentModel.Invalidate = true</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine>end if</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>end if</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>end if</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>ConstructContextualMenu</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Function ConstructContextualMenu(base as MenuItem, x as Integer, y as Integer) As Boolean</SourceLine>
    <SourceLine>Dim item As MenuItem</SourceLine>
    <SourceLine>Dim subItem As MenuItem</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>select case EditState</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.Start</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>if not Preview then</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>item = new MenuItem("Move")</SourceLine>
    <SourceLine>subItem = new MenuItem("Normal")</SourceLine>
    <SourceLine>subItem.Name = "mnuMoveNormal"</SourceLine>
    <SourceLine>item.Append subItem</SourceLine>
    <SourceLine>subItem = new MenuItem("X")</SourceLine>
    <SourceLine>subItem.Name = "mnuMoveX"</SourceLine>
    <SourceLine>item.Append subItem</SourceLine>
    <SourceLine>subItem = new MenuItem("Y")</SourceLine>
    <SourceLine>subItem.Name = "mnuMoveY"</SourceLine>
    <SourceLine>item.Append subItem</SourceLine>
    <SourceLine>subItem = new MenuItem("Z")</SourceLine>
    <SourceLine>subItem.Name = "mnuMoveZ"</SourceLine>
    <SourceLine>item.Append subItem</SourceLine>
    <SourceLine>base.Append item</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>item = new MenuItem("Scale")</SourceLine>
    <SourceLine>subItem = new MenuItem("Uniform")</SourceLine>
    <SourceLine>subItem.Name = "mnuScaleUniform"</SourceLine>
    <SourceLine>item.Append subItem</SourceLine>
    <SourceLine>subItem = new MenuItem("X")</SourceLine>
    <SourceLine>subItem.Name = "mnuScaleX"</SourceLine>
    <SourceLine>item.Append subItem</SourceLine>
    <SourceLine>subItem = new MenuItem("Y")</SourceLine>
    <SourceLine>subItem.Name = "mnuScaleY"</SourceLine>
    <SourceLine>item.Append subItem</SourceLine>
    <SourceLine>subItem = new MenuItem("Z")</SourceLine>
    <SourceLine>subItem.Name = "mnuScaleZ"</SourceLine>
    <SourceLine>item.Append subItem</SourceLine>
    <SourceLine>base.Append item</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>item = new MenuItem("Extrude")</SourceLine>
    <SourceLine>subItem = new MenuItem("Normal")</SourceLine>
    <SourceLine>subItem.Name = "mnuExtrudeNormal"</SourceLine>
    <SourceLine>item.Append subItem</SourceLine>
    <SourceLine>subItem = new MenuItem("X")</SourceLine>
    <SourceLine>subItem.Name = "mnuExtrudeX"</SourceLine>
    <SourceLine>item.Append subItem</SourceLine>
    <SourceLine>subItem = new MenuItem("Y")</SourceLine>
    <SourceLine>subItem.Name = "mnuExtrudeY"</SourceLine>
    <SourceLine>item.Append subItem</SourceLine>
    <SourceLine>subItem = new MenuItem("Z")</SourceLine>
    <SourceLine>subItem.Name = "mnuExtrudeZ"</SourceLine>
    <SourceLine>item.Append subItem</SourceLine>
    <SourceLine>base.Append item</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>' --------------------</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>item = new MenuItem("-")</SourceLine>
    <SourceLine>item.Name = "mnuSep1"</SourceLine>
    <SourceLine>base.Append item</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>end if</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>item = new MenuItem("Undo")</SourceLine>
    <SourceLine>item.Name = "mnuUndo"</SourceLine>
    <SourceLine>base.Append item</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>' --------------------</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>item = new MenuItem("-")</SourceLine>
    <SourceLine>item.Name = "mnuSep2"</SourceLine>
    <SourceLine>base.Append item</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>item = new MenuItem("Center Model")</SourceLine>
    <SourceLine>item.Name = "mnuCenterModel"</SourceLine>
    <SourceLine>base.Append item</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>item = new MenuItem("Unitize Model")</SourceLine>
    <SourceLine>item.Name = "mnuUnitizeModel"</SourceLine>
    <SourceLine>base.Append item</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>end select</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine></SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>End Function</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>ContextualMenuAction</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Function ContextualMenuAction(hitItem as MenuItem) As Boolean</SourceLine>
    <SourceLine>select case hitItem.Name</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case "mnuMoveNormal"</SourceLine>
    <SourceLine>action_MoveNormal</SourceLine>
    <SourceLine>case "mnuMoveX"</SourceLine>
    <SourceLine>action_MoveX</SourceLine>
    <SourceLine>case "mnuMoveY"</SourceLine>
    <SourceLine>action_MoveY</SourceLine>
    <SourceLine>case "mnuMoveZ"</SourceLine>
    <SourceLine>action_MoveZ</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case "mnuScaleUniform"</SourceLine>
    <SourceLine>action_ScaleUniform</SourceLine>
    <SourceLine>case "mnuScaleX"</SourceLine>
    <SourceLine>action_ScaleX</SourceLine>
    <SourceLine>case "mnuScaleY"</SourceLine>
    <SourceLine>action_ScaleY</SourceLine>
    <SourceLine>case "mnuScaleZ"</SourceLine>
    <SourceLine>action_ScaleZ</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case "mnuExtrudeNormal"</SourceLine>
    <SourceLine>action_ExtrudeNormal</SourceLine>
    <SourceLine>case "mnuExtrudeX"</SourceLine>
    <SourceLine>action_ExtrudeX</SourceLine>
    <SourceLine>case "mnuExtrudeY"</SourceLine>
    <SourceLine>action_ExtrudeY</SourceLine>
    <SourceLine>case "mnuExtrudeZ"</SourceLine>
    <SourceLine>action_ExtrudeZ</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>' --------------------</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case "mnuUndo"</SourceLine>
    <SourceLine>action_Undo</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>' --------------------</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case "mnuCenterModel"</SourceLine>
    <SourceLine>action_CenterModel</SourceLine>
    <SourceLine>case "mnuUnitizeModel"</SourceLine>
    <SourceLine>action_UnitizeModel</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>end select</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>End Function</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>MouseMove</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub MouseMove(X As Integer, Y As Integer)</SourceLine>
    <SourceLine>select case EditState</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.ExtrudeNormal</SourceLine>
    <SourceLine>VJ_AdjustExtrudeNormal(CurrentModel, (X - MousePrevX) / 100)</SourceLine>
    <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
    <SourceLine>CurrentModel.Invalidate = true</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.ExtrudeX</SourceLine>
    <SourceLine>VJ_AdjustExtrudeX(CurrentModel, (X - MousePrevX) / 100)</SourceLine>
    <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
    <SourceLine>CurrentModel.Invalidate = true</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.ExtrudeY</SourceLine>
    <SourceLine>VJ_AdjustExtrudeY(CurrentModel, (X - MousePrevX) / 100)</SourceLine>
    <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
    <SourceLine>CurrentModel.Invalidate = true</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.ExtrudeZ</SourceLine>
    <SourceLine>VJ_AdjustExtrudeZ(CurrentModel, (X - MousePrevX) / 100)</SourceLine>
    <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
    <SourceLine>CurrentModel.Invalidate = true</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.MoveNormal</SourceLine>
    <SourceLine>VJ_AdjustMoveNormal(CurrentModel, (X - MousePrevX) / 100)</SourceLine>
    <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
    <SourceLine>CurrentModel.Invalidate = true</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.MoveX</SourceLine>
    <SourceLine>VJ_AdjustMoveX(CurrentModel, (X - MousePrevX) / 100)</SourceLine>
    <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
    <SourceLine>CurrentModel.Invalidate = true</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.MoveY</SourceLine>
    <SourceLine>VJ_AdjustMoveY(CurrentModel, (X - MousePrevX) / 100)</SourceLine>
    <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
    <SourceLine>CurrentModel.Invalidate = true</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.MoveZ</SourceLine>
    <SourceLine>VJ_AdjustMoveZ(CurrentModel, (X - MousePrevX) / 100)</SourceLine>
    <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
    <SourceLine>CurrentModel.Invalidate = true</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.ScaleUniform</SourceLine>
    <SourceLine>VJ_AdjustScaleUniform(CurrentModel, 1 + ((X - MousePrevX) / 100))</SourceLine>
    <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
    <SourceLine>CurrentModel.Invalidate = true</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.ScaleX</SourceLine>
    <SourceLine>VJ_AdjustScaleX(CurrentModel, 1 + ((X - MousePrevX) / 100))</SourceLine>
    <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
    <SourceLine>CurrentModel.Invalidate = true</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.ScaleY</SourceLine>
    <SourceLine>VJ_AdjustScaleY(CurrentModel, 1 + ((X - MousePrevX) / 100))</SourceLine>
    <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
    <SourceLine>CurrentModel.Invalidate = true</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case EditStateEnum.ScaleZ</SourceLine>
    <SourceLine>VJ_AdjustScaleZ(CurrentModel, 1 + ((X - MousePrevX) / 100))</SourceLine>
    <SourceLine>MousePrevX = MouseX ' save mouse position</SourceLine>
    <SourceLine>CurrentModel.Invalidate = true</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>end select</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <ControlBehavior>
  <Superclass>MainToolbar</Superclass>
  <HookInstance>
   <ItemName>Action</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub Action(item As ToolItem)</SourceLine>
    <SourceLine>select case item.Name</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case "toolNew"</SourceLine>
    <SourceLine>action_New</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case "toolOpen"</SourceLine>
    <SourceLine>action_Open</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case "toolPreview"</SourceLine>
    <SourceLine>Preview = not Preview</SourceLine>
    <SourceLine>if Preview then</SourceLine>
    <SourceLine>X3_Initialize</SourceLine>
    <SourceLine>else</SourceLine>
    <SourceLine>VJ_Initialize</SourceLine>
    <SourceLine>end if</SourceLine>
    <SourceLine>if CurrentModel &lt;&gt; nil then</SourceLine>
    <SourceLine>CurrentModel.Invalidate = true</SourceLine>
    <SourceLine>end if</SourceLine>
    <SourceLine>Surface.Render</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case "toolSave"</SourceLine>
    <SourceLine>action_Save</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case "toolZoomIn"</SourceLine>
    <SourceLine>action_ZoomIn</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case "toolZoomOut"</SourceLine>
    <SourceLine>action_ZoomOut</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>end select</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
  <HookInstance>
   <ItemName>DropDownMenuAction</ItemName>
   <Compatibility></Compatibility>
   <Visible>1</Visible>
   <ItemSource>
    <TextEncoding>134217984</TextEncoding>
    <SourceLine>Sub DropDownMenuAction(item As ToolItem, hitItem As MenuItem)</SourceLine>
    <SourceLine>select case hitItem.Name</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>case "toolInsert_Cube"</SourceLine>
    <SourceLine>action_Insert_Cube</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>end select</SourceLine>
    <SourceLine></SourceLine>
    <SourceLine></SourceLine>
    <SourceLine>End Sub</SourceLine>
   </ItemSource>
  </HookInstance>
 </ControlBehavior>
 <Control>
  <ControlClass>OpenGLSurface</ControlClass>
  <ItemName>OpenGLSurface</ItemName>
  <PropertyVal Name="DoubleBuffer">True</PropertyVal>
  <PropertyVal Name="DepthBits"><Hex bytes="2">3234</Hex></PropertyVal>
  <PropertyVal Name="ColorBits"><Hex bytes="2">3234</Hex></PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="AutoDeactivate">True</PropertyVal>
  <PropertyVal Name="HelpTag"></PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="TabStop">True</PropertyVal>
  <PropertyVal Name="TabIndex"><Hex bytes="1">33</Hex></PropertyVal>
  <PropertyVal Name="TabPanelIndex"><Hex bytes="1">30</Hex></PropertyVal>
  <PropertyVal Name="LockBottom">True</PropertyVal>
  <PropertyVal Name="LockRight">True</PropertyVal>
  <PropertyVal Name="LockTop">True</PropertyVal>
  <PropertyVal Name="LockLeft">True</PropertyVal>
  <PropertyVal Name="Height"><Hex bytes="3">343030</Hex></PropertyVal>
  <PropertyVal Name="Width"><Hex bytes="3">363030</Hex></PropertyVal>
  <PropertyVal Name="Top"><Hex bytes="1">30</Hex></PropertyVal>
  <PropertyVal Name="Left"><Hex bytes="1">30</Hex></PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Super">OpenGLSurface</PropertyVal>
  <PropertyVal Name="Index"><Hex bytes="11">2D32313437343833363438</Hex></PropertyVal>
  <PropertyVal Name="Name">Surface</PropertyVal>
  <ControlIndex>0</ControlIndex>
  <Locked>0</Locked>
 </Control>
 <Control>
  <ControlClass>MainToolbar</ControlClass>
  <ItemName>MainToolbar</ItemName>
  <PropertyVal Name="TabPanelIndex"><Hex bytes="1">30</Hex></PropertyVal>
  <PropertyVal Name="InitialParent"></PropertyVal>
  <PropertyVal Name="Enabled">True</PropertyVal>
  <PropertyVal Name="Visible">True</PropertyVal>
  <PropertyVal Name="Height"><Hex bytes="2">3332</Hex></PropertyVal>
  <PropertyVal Name="Width"><Hex bytes="3">313030</Hex></PropertyVal>
  <PropertyVal Name="Top"><Hex bytes="2">3230</Hex></PropertyVal>
  <PropertyVal Name="Left"><Hex bytes="2">3230</Hex></PropertyVal>
  <PropertyVal Name="Scope">0</PropertyVal>
  <PropertyVal Name="Super">MainToolbar</PropertyVal>
  <PropertyVal Name="Index"><Hex bytes="11">2D32313437343833363438</Hex></PropertyVal>
  <PropertyVal Name="Name">tbMain</PropertyVal>
  <ControlIndex>1</ControlIndex>
  <Locked>0</Locked>
 </Control>
</block>
<block type="Module" ID="1637615615">
 <ObjName>VectorJam</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>0</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>VJ_AdjustExtrudeNormal</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_AdjustExtrudeNormal(model As X3Core.X3Model, value As Double)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i as Integer</SourceLine>
   <SourceLine>Dim j As Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim v As X3Core.X3Vector</SourceLine>
   <SourceLine>Dim n As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>i = 0</SourceLine>
   <SourceLine>for i = 0 to intArrayA.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.Polygon(intArrayA(i))</SourceLine>
   <SourceLine>n = model.Normal(poly.NIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>v = model.Vertex(poly.VIndex(j))</SourceLine>
   <SourceLine>v.X = v.X + n.X * value</SourceLine>
   <SourceLine>v.Y = v.Y + n.Y * value</SourceLine>
   <SourceLine>v.Z = v.Z + n.Z * value</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model, value As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_AdjustExtrudeX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_AdjustExtrudeX(model As X3Core.X3Model, value As Double)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i as Integer</SourceLine>
   <SourceLine>Dim j As Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim v As X3Core.X3Vector</SourceLine>
   <SourceLine>Dim n As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>i = 0</SourceLine>
   <SourceLine>for i = 0 to intArrayA.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.Polygon(intArrayA(i))</SourceLine>
   <SourceLine>n = model.Normal(poly.NIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>v = model.Vertex(poly.VIndex(j))</SourceLine>
   <SourceLine>v.X = v.X + n.X * value</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model, value As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_AdjustExtrudeY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_AdjustExtrudeY(model As X3Core.X3Model, value As Double)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i as Integer</SourceLine>
   <SourceLine>Dim j As Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim v As X3Core.X3Vector</SourceLine>
   <SourceLine>Dim n As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>i = 0</SourceLine>
   <SourceLine>for i = 0 to intArrayA.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.Polygon(intArrayA(i))</SourceLine>
   <SourceLine>n = model.Normal(poly.NIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>v = model.Vertex(poly.VIndex(j))</SourceLine>
   <SourceLine>v.Y = v.Y + n.Y * value</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model, value As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_AdjustExtrudeZ</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_AdjustExtrudeZ(model As X3Core.X3Model, value As Double)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i as Integer</SourceLine>
   <SourceLine>Dim j As Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim v As X3Core.X3Vector</SourceLine>
   <SourceLine>Dim n As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>i = 0</SourceLine>
   <SourceLine>for i = 0 to intArrayA.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.Polygon(intArrayA(i))</SourceLine>
   <SourceLine>n = model.Normal(poly.NIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>v = model.Vertex(poly.VIndex(j))</SourceLine>
   <SourceLine>v.Z = v.Z + n.Z * value</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model, value As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_AdjustMoveNormal</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_AdjustMoveNormal(model As X3Core.X3Model, value As Double)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i as Integer</SourceLine>
   <SourceLine>Dim j As Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim v As X3Core.X3Vector</SourceLine>
   <SourceLine>Dim n As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>i = 0</SourceLine>
   <SourceLine>for i = 0 to intArrayA.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.Polygon(intArrayA(i))</SourceLine>
   <SourceLine>n = model.Normal(poly.NIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>v = model.Vertex(poly.VIndex(j))</SourceLine>
   <SourceLine>v.X = v.X + n.X * value</SourceLine>
   <SourceLine>v.Y = v.Y + n.Y * value</SourceLine>
   <SourceLine>v.Z = v.Z + n.Z * value</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model, value As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_AdjustMoveX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_AdjustMoveX(model As X3Core.X3Model, value As Double)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim v As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' move vertices</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to intArrayC.Ubound</SourceLine>
   <SourceLine>v = model.Vertex(intArrayC(i))</SourceLine>
   <SourceLine>v.X = v.X + value</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model, value As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_AdjustMoveY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_AdjustMoveY(model As X3Core.X3Model, value As Double)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim v As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' move vertices</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to intArrayC.Ubound</SourceLine>
   <SourceLine>v = model.Vertex(intArrayC(i))</SourceLine>
   <SourceLine>v.Y = v.Y + value</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model, value As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_AdjustMoveZ</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_AdjustMoveZ(model As X3Core.X3Model, value As Double)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim v As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' move vertices</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to intArrayC.Ubound</SourceLine>
   <SourceLine>v = model.Vertex(intArrayC(i))</SourceLine>
   <SourceLine>v.Z = v.Z + value</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model, value As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_AdjustScaleUniform</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_AdjustScaleUniform(model As X3Core.X3Model, value As Double)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i as Integer</SourceLine>
   <SourceLine>Dim v As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to intArrayC.Ubound</SourceLine>
   <SourceLine>v = model.Vertex(intArrayC(i))</SourceLine>
   <SourceLine>v.X = (v.X - dblArrayA(0)) * value + dblArrayA(0)</SourceLine>
   <SourceLine>v.Y = (v.Y - dblArrayA(1)) * value + dblArrayA(1)</SourceLine>
   <SourceLine>v.Z = (v.Z - dblArrayA(2)) * value + dblArrayA(2)</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model, value As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_AdjustScaleX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_AdjustScaleX(model As X3Core.X3Model, value As Double)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i as Integer</SourceLine>
   <SourceLine>Dim v As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to intArrayC.Ubound</SourceLine>
   <SourceLine>v = model.Vertex(intArrayC(i))</SourceLine>
   <SourceLine>v.X = (v.X - dblArrayA(0)) * value + dblArrayA(0)</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model, value As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_AdjustScaleY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_AdjustScaleY(model As X3Core.X3Model, value As Double)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i as Integer</SourceLine>
   <SourceLine>Dim v As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to intArrayC.Ubound</SourceLine>
   <SourceLine>v = model.Vertex(intArrayC(i))</SourceLine>
   <SourceLine>v.Y = (v.Y - dblArrayA(1)) * value + dblArrayA(1)</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model, value As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_AdjustScaleZ</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_AdjustScaleZ(model As X3Core.X3Model, value As Double)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i as Integer</SourceLine>
   <SourceLine>Dim v As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to intArrayC.Ubound</SourceLine>
   <SourceLine>v = model.Vertex(intArrayC(i))</SourceLine>
   <SourceLine>v.Z = (v.Z - dblArrayA(2)) * value + dblArrayA(2)</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model, value As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_CommitExtrude</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_CommitExtrude(model As X3Core.X3Model)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i as Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' recalculate normals of affected polygons</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to intArrayA.Ubound</SourceLine>
   <SourceLine>poly = model.Polygon(intArrayA(i))</SourceLine>
   <SourceLine>poly.CalculateNormal</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to intArrayB.Ubound</SourceLine>
   <SourceLine>poly = model.Polygon(intArrayB(i))</SourceLine>
   <SourceLine>poly.CalculateNormal</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Redim intArrayA(-1)</SourceLine>
   <SourceLine>Redim intArrayB(-1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.Invalidate = true</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_CommitMove</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_CommitMove(model As X3Core.X3Model)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i as Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' recalculate normals of affected polygons</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to intArrayB.Ubound</SourceLine>
   <SourceLine>poly = model.Polygon(intArrayB(i))</SourceLine>
   <SourceLine>poly.CalculateNormal</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Redim intArrayA(-1)</SourceLine>
   <SourceLine>Redim intArrayB(-1)</SourceLine>
   <SourceLine>Redim intArrayC(-1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.Invalidate = true</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_CommitScale</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_CommitScale(model As X3Core.X3Model)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i as Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' recalculate normals of affected polygons</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to intArrayB.Ubound</SourceLine>
   <SourceLine>poly = model.Polygon(intArrayB(i))</SourceLine>
   <SourceLine>poly.CalculateNormal</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Redim intArrayA(-1)</SourceLine>
   <SourceLine>Redim intArrayB(-1)</SourceLine>
   <SourceLine>Redim intArrayC(-1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Redim dblArrayA(-1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.Invalidate = true</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_DeleteSelectedPolygons</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_DeleteSelectedPolygons(model As X3Core.X3Model)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>i = 0</SourceLine>
   <SourceLine>while i &lt;= model.Polygon.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.Polygon(i)</SourceLine>
   <SourceLine>if poly.Selected then</SourceLine>
   <SourceLine>model.Polygon.Remove(i)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>i = i + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' remove orphaned vertices</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' todo</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.Invalidate = True</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_Initialize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_Initialize()</SourceLine>
   <SourceLine>' enable depth buffer to ensure objects in distance is not drawn over objects closer to us</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_DEPTH_TEST</SourceLine>
   <SourceLine>OpenGL.glDepthMask OpenGL.GL_TRUE</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' make sure only back faces are culled and enable culling</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_CULL_FACE</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' enable OpenGL lighing</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_LIGHTING</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' enable glColor instruction while lighting is enabled</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_COLOR_MATERIAL</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' enable blending for transparent models</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_BLEND</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set the blending function for alpha colors</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glBlendFunc OpenGL.GL_SRC_ALPHA, OpenGL.GL_ONE_MINUS_SRC_ALPHA</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' enable the use of textures</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_TEXTURE_2D</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_Insert_Cube</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_Insert_Cube(model As X3Core.X3Model)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim vertexOffset As Integer</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' first deselect all existing polygons in model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to model.Polygon.Ubound</SourceLine>
   <SourceLine>model.Polygon(i).Selected = false</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' insert cube data</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' add vertices to model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>vertexOffset = model.Vertex.Ubound + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.Vertex.Append new X3Core.X3Vector(-1, 1, 1)</SourceLine>
   <SourceLine>model.Vertex.Append new X3Core.X3Vector(1, -1, 1)</SourceLine>
   <SourceLine>model.Vertex.Append new X3Core.X3Vector(1, 1, 1)</SourceLine>
   <SourceLine>model.Vertex.Append new X3Core.X3Vector(-1, -1, 1)</SourceLine>
   <SourceLine>model.Vertex.Append new X3Core.X3Vector(-1, -1, -1)</SourceLine>
   <SourceLine>model.Vertex.Append new X3Core.X3Vector(-1, 1, -1)</SourceLine>
   <SourceLine>model.Vertex.Append new X3Core.X3Vector(1, -1, -1)</SourceLine>
   <SourceLine>model.Vertex.Append new X3Core.X3Vector(1, 1, -1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' front face</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = new X3Core.X3Polygon(model, 0, 0, 1)</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 2</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 0</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 3</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 1</SourceLine>
   <SourceLine>poly.Selected = true</SourceLine>
   <SourceLine>model.AppendPolygon poly</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' left face</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = new X3Core.X3Polygon(model, -1, 0, 0)</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 0</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 5</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 4</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 3</SourceLine>
   <SourceLine>poly.Selected = true</SourceLine>
   <SourceLine>model.AppendPolygon poly</SourceLine>
   <SourceLine>poly.CalculateNormal()</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' right face</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = new X3Core.X3Polygon(model, 1, 0, 0)</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 2</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 1</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 6</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 7</SourceLine>
   <SourceLine>poly.Selected = true</SourceLine>
   <SourceLine>model.AppendPolygon poly</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' top face</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = new X3Core.X3Polygon(model, 0, 1, 0)</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 2</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 7</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 5</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 0</SourceLine>
   <SourceLine>poly.Selected = true</SourceLine>
   <SourceLine>model.AppendPolygon poly</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' bottom face</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = new X3Core.X3Polygon(model, 0, -1, 0)</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 1</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 3</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 4</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 6</SourceLine>
   <SourceLine>poly.Selected = true</SourceLine>
   <SourceLine>model.AppendPolygon poly</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' back face</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = new X3Core.X3Polygon(model, 0, 0, -1)</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 7</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 6</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 4</SourceLine>
   <SourceLine>poly.VIndex.Append vertexOffset + 5</SourceLine>
   <SourceLine>poly.Selected = true</SourceLine>
   <SourceLine>model.AppendPolygon poly</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.Unitize()</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.Invalidate = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_RenderMesh</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_RenderMesh(model As X3Core.X3Model, editState As VectorJam.EditStateEnum)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glDisable OpenGL.GL_TEXTURE_2D ' disable the use of textures</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glPushMatrix ' save matrix</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' apply the model's rotation</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>X3_SetRotation(model.Rotation)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' have we rendered this model previous innto an OpenGL display list?</SourceLine>
   <SourceLine>if (model.OGLName &gt; 0) and not model.Invalidate then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glCallList model.OGLName 'yes, so render this existing list</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' is the model loaded in OpenGL memory and invalid?</SourceLine>
   <SourceLine>if (model.OGLName &gt; 0) and model.Invalidate then</SourceLine>
   <SourceLine>' yes, so first remove the model from OpenGL memory</SourceLine>
   <SourceLine>OpenGL.glDeleteLists(model.OGLName, 1)</SourceLine>
   <SourceLine>model.OGLName = 0</SourceLine>
   <SourceLine>model.Invalidate = false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' create a new OpenGL display list</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.OGLName = OpenGL.glGenLists(1)</SourceLine>
   <SourceLine>OpenGL.glNewList model.OGLName, OpenGL.GL_COMPILE</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' ===== DRAW BACK FACES =======================================</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glCullFace OpenGL.GL_FRONT</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glPolygonMode(OpenGL.GL_FRONT_AND_BACK, OpenGL.GL_FILL) ' draw filled polygons</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' draw polygon faces</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glPolygonOffset(1.0, 1.0)</SourceLine>
   <SourceLine>OpenGL.glEnable(OpenGL.GL_POLYGON_OFFSET_FILL)</SourceLine>
   <SourceLine>OpenGL.glPolygonMode(OpenGL.GL_FRONT_AND_BACK, OpenGL.GL_FILL)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_SubmitMesh model, editState, false, true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' draw polygon borders</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glDisable(OpenGL.GL_POLYGON_OFFSET_FILL)</SourceLine>
   <SourceLine>OpenGL.glPolygonMode(OpenGL.GL_FRONT_AND_BACK, OpenGL.GL_LINE) ' polygon lines</SourceLine>
   <SourceLine>OpenGL.glColor4d(0, 0, 0, 1) ' all borders are drawn in black</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_SubmitMesh model, editState, true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' ===== DRAW FRONT FACES =======================================</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glCullFace OpenGL.GL_BACK</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glPolygonMode(OpenGL.GL_FRONT_AND_BACK, OpenGL.GL_FILL) ' draw filled polygons</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' draw polygon faces</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glPolygonOffset(1.0, 1.0)</SourceLine>
   <SourceLine>OpenGL.glEnable(OpenGL.GL_POLYGON_OFFSET_FILL)</SourceLine>
   <SourceLine>OpenGL.glPolygonMode(OpenGL.GL_FRONT_AND_BACK, OpenGL.GL_FILL)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_SubmitMesh model, editState</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' draw polygon borders</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glDisable(OpenGL.GL_POLYGON_OFFSET_FILL)</SourceLine>
   <SourceLine>OpenGL.glPolygonMode(OpenGL.GL_FRONT_AND_BACK, OpenGL.GL_LINE) ' polygon lines</SourceLine>
   <SourceLine>OpenGL.glColor4d(0, 0, 0, 1) ' all borders are drawn in black</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>VJ_SubmitMesh model, editState, true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glDisable(OpenGL.GL_POLYGON_OFFSET_FILL)</SourceLine>
   <SourceLine>OpenGL.glPolygonMode(OpenGL.GL_FRONT_AND_BACK, OpenGL.GL_FILL)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEndList ' end of display list</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glCallList model.OGLName ' render the display  list</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glPopMatrix ' restore matrix</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model, editState As VectorJam.EditStateEnum</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_StartExtrude</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_StartExtrude(model As X3Core.X3Model)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i as Integer</SourceLine>
   <SourceLine>Dim j As Integer</SourceLine>
   <SourceLine>Dim polyUB As Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim exPoly As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim vertOffset As Integer</SourceLine>
   <SourceLine>Dim v As X3Core.X3Vector</SourceLine>
   <SourceLine>Dim n As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Redim intArrayA(-1)</SourceLine>
   <SourceLine>Redim intArrayB(-1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>polyUB = model.Polygon.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>i = 0</SourceLine>
   <SourceLine>for i = 0 to polyUB</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.Polygon(i)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.Selected then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>intArrayA.Append i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' create new extruded vertices</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>vertOffset = model.Vertex.Ubound + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>n = model.Normal(poly.NIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>v = model.Vertex(poly.VIndex(j)).Clone</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>select case EditState</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case EditStateEnum.ExtrudeX</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>v.X = v.X + (n.X * 0.1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case EditStateEnum.ExtrudeY</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>v.Y = v.Y + (n.Y * 0.1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case EditStateEnum.ExtrudeZ</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>v.Z = v.Z + (n.Z * 0.1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>v.X = v.X + (n.X * 0.1)</SourceLine>
   <SourceLine>v.Y = v.Y + (n.Y * 0.1)</SourceLine>
   <SourceLine>v.Z = v.Z + (n.Z * 0.1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.Vertex.Append v</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' create extruded polygons</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>j = 0</SourceLine>
   <SourceLine>while j  &lt;= poly.VIndex.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>exPoly = new X3Core.X3Polygon(model)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>exPoly.CIndex = poly.CIndex</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if j &gt;= poly.VIndex.Ubound then</SourceLine>
   <SourceLine>exPoly.VIndex.Append poly.VIndex(j)</SourceLine>
   <SourceLine>exPoly.VIndex.Append poly.VIndex(0)</SourceLine>
   <SourceLine>exPoly.VIndex.Append vertOffset</SourceLine>
   <SourceLine>exPoly.VIndex.Append vertOffset + j</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>exPoly.VIndex.Append poly.VIndex(j)</SourceLine>
   <SourceLine>exPoly.VIndex.Append poly.VIndex(j + 1)</SourceLine>
   <SourceLine>exPoly.VIndex.Append vertOffset + j + 1</SourceLine>
   <SourceLine>exPoly.VIndex.Append vertOffset + j</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.AppendPolygon exPoly</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>intArrayB.Append model.Polygon.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>exPoly.CalculateNormal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>j = j + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' assign selected polygon to extruded vertices</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>poly.VIndex(j) = vertOffset + j</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_StartMove</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_StartMove(model As X3Core.X3Model)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim j As Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim vertDic as new Dictionary</SourceLine>
   <SourceLine>Dim bContinue As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' find all selected polygons and vertices affected by move</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Redim intArrayA(-1)</SourceLine>
   <SourceLine>Redim intArrayC(-1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to model.Polygon.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.Polygon(i)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.Selected then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>intArrayA.Append i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not vertDic.HasKey(poly.VIndex(j)) then</SourceLine>
   <SourceLine>intArrayC.Append poly.VIndex(j)</SourceLine>
   <SourceLine>vertDic.Value(poly.VIndex(j)) = 0</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' store all polygons that uses affected vertices</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Redim intArrayB(-1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to model.Polygon.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.Polygon(i)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>j = 0</SourceLine>
   <SourceLine>bContinue = true</SourceLine>
   <SourceLine>while (j &lt;= poly.VIndex.Ubound) and bContinue</SourceLine>
   <SourceLine>if vertDic.HasKey(poly.VIndex(j)) then</SourceLine>
   <SourceLine>intArrayB.Append i</SourceLine>
   <SourceLine>bContinue = false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>j = j + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_StartScale</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_StartScale(model As X3Core.X3Model)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim j As Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim vertDic as new Dictionary</SourceLine>
   <SourceLine>Dim bContinue As Boolean</SourceLine>
   <SourceLine>Dim xTot As Double</SourceLine>
   <SourceLine>Dim yTot As Double</SourceLine>
   <SourceLine>Dim zTot As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' find all selected polygons and vertices affected by move</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Redim intArrayA(-1)</SourceLine>
   <SourceLine>Redim intArrayC(-1)</SourceLine>
   <SourceLine>Redim dblArrayA(-1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to model.Polygon.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.Polygon(i)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.Selected then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>intArrayA.Append i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not vertDic.HasKey(poly.VIndex(j)) then</SourceLine>
   <SourceLine>intArrayC.Append poly.VIndex(j)</SourceLine>
   <SourceLine>vertDic.Value(poly.VIndex(j)) = 0</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' store all polygons that uses affected vertices</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Redim intArrayB(-1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to model.Polygon.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.Polygon(i)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>j = 0</SourceLine>
   <SourceLine>bContinue = true</SourceLine>
   <SourceLine>while (j &lt;= poly.VIndex.Ubound) and bContinue</SourceLine>
   <SourceLine>if vertDic.HasKey(poly.VIndex(j)) then</SourceLine>
   <SourceLine>intArrayB.Append i</SourceLine>
   <SourceLine>bContinue = false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>j = j + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' calculate center of selected vertices</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>xTot = 0</SourceLine>
   <SourceLine>yTot = 0</SourceLine>
   <SourceLine>zTot = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to intArrayC.Ubound</SourceLine>
   <SourceLine>xTot = xTot + model.Vertex(intArrayC(i)).X</SourceLine>
   <SourceLine>yTot = yTot + model.Vertex(intArrayC(i)).Y</SourceLine>
   <SourceLine>zTot = zTot + model.Vertex(intArrayC(i)).Z</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dblArrayA.Append xTot / (intArrayC.Ubound + 1)</SourceLine>
   <SourceLine>dblArrayA.Append yTot / (intArrayC.Ubound + 1)</SourceLine>
   <SourceLine>dblArrayA.Append zTot / (intArrayC.Ubound + 1)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>VJ_SubmitMesh</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub VJ_SubmitMesh(model As X3Core.X3Model, editMode As VectorJam.EditStateEnum, borders As Boolean = false, backfaces As Boolean = false)</SourceLine>
   <SourceLine>#pragma DisableBackgroundTasks</SourceLine>
   <SourceLine>#pragma NilObjectChecking</SourceLine>
   <SourceLine>#pragma StackOverflowChecking</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim j As Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim prevUB As Integer</SourceLine>
   <SourceLine>Dim bDrawing As Boolean</SourceLine>
   <SourceLine>Dim n As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>prevUB = -1</SourceLine>
   <SourceLine>bDrawing = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to model.Polygon.Ubound ' loop through all the polygons</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.Polygon(i) ' get the next polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if (poly.VIndex.Ubound &lt;&gt; prevUB) then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if bDrawing then</SourceLine>
   <SourceLine>OpenGL.glEnd ' end drawing polygons</SourceLine>
   <SourceLine>bDrawing = false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>select case poly.VIndex.Ubound</SourceLine>
   <SourceLine>case 2</SourceLine>
   <SourceLine>OpenGL.glBegin OpenGL.GL_TRIANGLES ' start drawing triangle polygons</SourceLine>
   <SourceLine>bDrawing = true</SourceLine>
   <SourceLine>case 3</SourceLine>
   <SourceLine>OpenGL.glBegin OpenGL.GL_QUADS ' start drawing quad polygons</SourceLine>
   <SourceLine>bDrawing = true</SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>prevUB = poly.VIndex.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.VIndex.Ubound &gt; 3 then</SourceLine>
   <SourceLine>OpenGL.glBegin OpenGL.GL_POLYGON ' start drawing quad polygons</SourceLine>
   <SourceLine>bDrawing = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set the normal of the polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>n = model.Normal(poly.NIndex)</SourceLine>
   <SourceLine>OpenGL.glNormal3d n.X, n.Y, n.Z</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set the color of the polygon based on selection</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not borders then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if backfaces then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if (poly.Selected) then</SourceLine>
   <SourceLine>if editMode = VectorJam.EditStateEnum.Start then</SourceLine>
   <SourceLine>OpenGL.glColor4d(0.7, 0.9, 0.7, 1)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>OpenGL.glColor4d(0.74, 0.5, 0.25, 1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>OpenGL.glColor4d(0.7, 0.7, 0.9, 1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if (poly.Selected) then</SourceLine>
   <SourceLine>if editMode = VectorJam.EditStateEnum.Start then</SourceLine>
   <SourceLine>OpenGL.glColor4d(0.5, 0.74, 0.25, 1)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>OpenGL.glColor4d(0.74, 0.25, 0.25, 1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>OpenGL.glColor4d(0.8, 0.8, 0.8, 1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' add the vertexes of the polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>OpenGL.glVertex3d model.Vertex(poly.VIndex(j)).X, model.Vertex(poly.VIndex(j)).Y, model.Vertex(poly.VIndex(j)).Z</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.VIndex.Ubound &gt; 3 then</SourceLine>
   <SourceLine>OpenGL.glEnd ' end drawing polygons</SourceLine>
   <SourceLine>bDrawing = false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if bDrawing then</SourceLine>
   <SourceLine>OpenGL.glEnd ' end drawing polygons</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model, editMode As VectorJam.EditStateEnum, borders As Boolean = false, backfaces As Boolean = false</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>dblArrayA()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>dblArrayA() As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>dblArrayA() As Double</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>EditState</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EditState As EditStateEnum</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EditState As EditStateEnum</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>intArrayA()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>intArrayA() As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>intArrayA() As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>intArrayB()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>intArrayB() As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>intArrayB() As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>intArrayC()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>intArrayC() As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>intArrayC() As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
 <Enumeration>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>EditStateEnum</ItemName>
  <ItemFlags>0</ItemFlags>
  <ItemType>Integer</ItemType>
  <ItemName>EditStateEnum</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Start</SourceLine>
   <SourceLine>ExtrudeNormal</SourceLine>
   <SourceLine>ExtrudeX</SourceLine>
   <SourceLine>ExtrudeY</SourceLine>
   <SourceLine>ExtrudeZ</SourceLine>
   <SourceLine>MoveNormal</SourceLine>
   <SourceLine>MoveX</SourceLine>
   <SourceLine>MoveY</SourceLine>
   <SourceLine>MoveZ</SourceLine>
   <SourceLine>ScaleUniform</SourceLine>
   <SourceLine>ScaleX</SourceLine>
   <SourceLine>ScaleY</SourceLine>
   <SourceLine>ScaleZ</SourceLine>
  </ItemSource>
 </Enumeration>
</block>
<block type="Module" ID="639109119">
 <ObjName>X3Core</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>0</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>renderPolygon</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub renderPolygon(poly As X3Core.X3Polygon, ByRef currMat As Integer, ByRef currIndex As Integer)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim model As X3Core.X3Model</SourceLine>
   <SourceLine>Dim n As X3Core.X3Vector</SourceLine>
   <SourceLine>Dim j As Integer</SourceLine>
   <SourceLine>Dim col As X3Core.X3Color</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model = poly.ParentModel</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' is this polygon mapped with a texture, and if so, is the UV coordinates configured?</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if ((poly.TIndex &gt;= 0) and (poly.UVIndex.Ubound &gt;= poly.VIndex.Ubound)) or (poly.SIndex &gt;= 0) then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' loop through all the vertexes of the polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.VNIndex.Ubound = poly.VIndex.Ubound then ' normal per vertex?</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' yes</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>n = model.Normal(poly.VNIndex(j))</SourceLine>
   <SourceLine>OpenGL.glNormal3d n.X, n.Y, n.Z</SourceLine>
   <SourceLine>OpenGL.glTexCoord2d model.UVMap(poly.UVIndex(j)).U, model.UVMap(poly.UVIndex(j)).V ' set the texture UV-coordinates for next vertex</SourceLine>
   <SourceLine>OpenGL.glVertex3d model.Vertex(poly.VIndex(j)).X, model.Vertex(poly.VIndex(j)).Y, model.Vertex(poly.VIndex(j)).Z ' add the vertex to the OpenGL vertex list</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set normal for whole polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>n = model.Normal(poly.NIndex)</SourceLine>
   <SourceLine>OpenGL.glNormal3d n.X, n.Y, n.Z</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' render vertices</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>OpenGL.glTexCoord2d model.UVMap(poly.UVIndex(j)).U, model.UVMap(poly.UVIndex(j)).V ' set the texture UV-coordinates for next vertex</SourceLine>
   <SourceLine>OpenGL.glVertex3d model.Vertex(poly.VIndex(j)).X, model.Vertex(poly.VIndex(j)).Y, model.Vertex(poly.VIndex(j)).Z ' add the vertex to the OpenGL vertex list</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif poly.MIndex &gt;= 0 then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' this polygon uses material settings</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if currMat &lt;&gt; 2 then ' currently using materials?</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>currMat = 2</SourceLine>
   <SourceLine>currIndex = -1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if currIndex &lt;&gt; poly.MIndex then ' still using same material?</SourceLine>
   <SourceLine>' no, so set new material</SourceLine>
   <SourceLine>X3_SetMaterial model.Material(poly.MIndex)</SourceLine>
   <SourceLine>currIndex = poly.MIndex</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' loop through all the vertexes of the polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.VNIndex.Ubound = poly.VIndex.Ubound then ' normal per vertex?</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' yes</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>n = model.Normal(poly.VNIndex(j))</SourceLine>
   <SourceLine>OpenGL.glNormal3d n.X, n.Y, n.Z</SourceLine>
   <SourceLine>OpenGL.glVertex3d model.Vertex(poly.VIndex(j)).X, model.Vertex(poly.VIndex(j)).Y, model.Vertex(poly.VIndex(j)).Z</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set normal for whole polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>n = model.Normal(poly.NIndex)</SourceLine>
   <SourceLine>OpenGL.glNormal3d n.X, n.Y, n.Z</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' render vertices</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>OpenGL.glVertex3d model.Vertex(poly.VIndex(j)).X, model.Vertex(poly.VIndex(j)).Y, model.Vertex(poly.VIndex(j)).Z</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' this polygon uses a normal RGBA color</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if currMat &lt;&gt; 0 then ' currently using RGBA?</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>currMat = 0</SourceLine>
   <SourceLine>currIndex = -1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if currIndex &lt;&gt; poly.CIndex then ' still using same RGBA color?</SourceLine>
   <SourceLine>' no, so set new RGBA color</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.CIndex &gt;= 0 then ' is the color index pointing to a color?</SourceLine>
   <SourceLine>' yes, so set the color</SourceLine>
   <SourceLine>col = model.ColorPal(poly.CIndex)</SourceLine>
   <SourceLine>OpenGL.glColor4d(col.Red, col.Green, col.Blue, col.Alpha)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>' no, so make the fill color opague white</SourceLine>
   <SourceLine>OpenGL.glColor4d(1, 1, 1, 1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' loop through all the vertexes of the polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.VNIndex.Ubound = poly.VIndex.Ubound then ' normal per vertex?</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' yes</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>n = model.Normal(poly.VNIndex(j))</SourceLine>
   <SourceLine>OpenGL.glNormal3d n.X, n.Y, n.Z</SourceLine>
   <SourceLine>OpenGL.glVertex3d model.Vertex(poly.VIndex(j)).X, model.Vertex(poly.VIndex(j)).Y, model.Vertex(poly.VIndex(j)).Z</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set normal for whole polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>n = model.Normal(poly.NIndex)</SourceLine>
   <SourceLine>OpenGL.glNormal3d n.X, n.Y, n.Z</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' render vertices</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>OpenGL.glVertex3d model.Vertex(poly.VIndex(j)).X, model.Vertex(poly.VIndex(j)).Y, model.Vertex(poly.VIndex(j)).Z</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>poly As X3Core.X3Polygon, ByRef currMat As Integer, ByRef currIndex As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>X3_CreateSprite</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function X3_CreateSprite(initSheet As Picture, spriteWidth As Integer, spriteHeight As Integer, imageCount As Integer) As X3Core.X3Model</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim model As X3Core.X3Model</SourceLine>
   <SourceLine>Dim p As X3Core.X3Polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' create a new model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model = new X3Core.X3Model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' instantiate a sprite from our sprite sheet, and add it to the model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Model.Sprite.Append new X3Core.X3Sprite(initSheet, spriteWidth, spriteHeight, imageCount)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' add vertices to the model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Model.Vertex.Append new X3Core.X3Vector(-1, 1, 0)</SourceLine>
   <SourceLine>Model.Vertex.Append new X3Core.X3Vector(-1, -1, 0)</SourceLine>
   <SourceLine>Model.Vertex.Append new X3Core.X3Vector(1, -1, 0)</SourceLine>
   <SourceLine>Model.Vertex.Append new X3Core.X3Vector(1, 1, 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' add the normal to the model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Model.Normal.Append new X3Core.X3Vector(0, 0, 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' create and add a sprite polygon to the model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>p = new X3Core.X3Polygon</SourceLine>
   <SourceLine>p.VIndex.Append 0 ' vertices</SourceLine>
   <SourceLine>p.VIndex.Append 1</SourceLine>
   <SourceLine>p.VIndex.Append 2</SourceLine>
   <SourceLine>p.VIndex.Append 3</SourceLine>
   <SourceLine>p.NIndex = 0 ' normal</SourceLine>
   <SourceLine>p.SIndex = 0 ' point to sprite</SourceLine>
   <SourceLine>model.AppendPolygon p</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>initSheet As Picture, spriteWidth As Integer, spriteHeight As Integer, imageCount As Integer</ItemParams>
  <ItemResult>X3Core.X3Model</ItemResult>
 </Method>
 <Method>
  <ItemName>X3_EnableLight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub X3_EnableLight(lightIndex As Integer, light As X3Core.X3Light)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glLightfv lightIndex, OpenGL.GL_POSITION, light.Position.GetMemoryBlock ' set position</SourceLine>
   <SourceLine>OpenGL.glLightfv lightIndex, OpenGL.GL_AMBIENT, light.Ambient.GetMemoryBlock ' set ambience</SourceLine>
   <SourceLine>OpenGL.glLightfv lightIndex, OpenGL.GL_DIFFUSE, light.Diffuse.GetMemoryBlock ' set diffuse</SourceLine>
   <SourceLine>OpenGL.glLightfv lightIndex, OpenGL.GL_SPECULAR, light.Specular.GetMemoryBlock ' set specular</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEnable lightIndex ' enable the light</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>lightIndex As Integer, light As X3Core.X3Light</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>X3_Initialize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub X3_Initialize()</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' enable depth buffer to ensure objects in distance is not drawn over objects closer to us</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_DEPTH_TEST</SourceLine>
   <SourceLine>OpenGL.glDepthMask OpenGL.GL_TRUE</SourceLine>
   <SourceLine>OpenGL.glDepthFunc OpenGL.GL_LEQUAL ' set the depth buffer function to "less"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' make sure only back faces are culled and enable culling</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glCullFace OpenGL.GL_BACK</SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_CULL_FACE</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' enable OpenGL lighing</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_LIGHTING</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' enable blending for transparent models</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_BLEND</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set the blending function for alpha colors</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glBlendFunc OpenGL.GL_SRC_ALPHA, OpenGL.GL_ONE_MINUS_SRC_ALPHA</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>X3_LoadRGBATexture</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function X3_LoadRGBATexture(RGBABitmap As MemoryBlock, width As Integer, height As Integer) As Integer</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim idMB As MemoryBlock</SourceLine>
   <SourceLine>Dim oglName As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' ask OpenGL for an ID that we can use for our texture</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>idMB = new MemoryBlock(8) ' create a memory block into which OpenGL will store the ID value</SourceLine>
   <SourceLine>OpenGL.glGenTextures(1, idMB) ' get the ID from OpenGL</SourceLine>
   <SourceLine>oglName = idMB.Long(0) ' store the value returned by OpenGL in an integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' specify to OpenGL how this texture should be rendered</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glBindTexture(OpenGL.GL_TEXTURE_2D, OGLName) ' select the texture id that OpenGL allocated for our texture</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glTexParameteri(OpenGL.GL_TEXTURE_2D, OpenGL.GL_TEXTURE_MIN_FILTER, OpenGL.GL_LINEAR) // set up settings</SourceLine>
   <SourceLine>OpenGL.glTexParameteri(OpenGL.GL_TEXTURE_2D, OpenGL.GL_TEXTURE_MAG_FILTER, OpenGL.GL_LINEAR) // set up some more settings</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' now we load the image bitmap</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glTexImage2d(OpenGL.GL_TEXTURE_2D, 0, 4, width, height , 0, OpenGL.GL_RGBA, OpenGL.GL_UNSIGNED_BYTE, RGBABitmap)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return oglName</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>RGBABitmap As MemoryBlock, width As Integer, height As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>X3_PictureFromTexture</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function X3_PictureFromTexture(text As X3Core.X3Texture) As Picture</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim pic as new Picture(text.Width, text.height, 32)</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim j As Integer</SourceLine>
   <SourceLine>Dim pixIndex As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pixIndex = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>j = 0</SourceLine>
   <SourceLine>while j &lt; text.height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>i = 0</SourceLine>
   <SourceLine>while i &lt; text.width</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pic.RGBSurface.Pixel(i, j) = RGB(text.RGBABitmap.UInt8Value(pixIndex), text.RGBABitmap.UInt8Value(pixIndex + 1), text.RGBABitmap.UInt8Value(pixIndex + 2), text.RGBABitmap.UInt8Value(pixIndex + 3))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pixIndex = pixIndex + 4</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>i = i + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>j = j + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return pic</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>text As X3Core.X3Texture</ItemParams>
  <ItemResult>Picture</ItemResult>
 </Method>
 <Method>
  <ItemName>X3_RenderModel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub X3_RenderModel(model As X3Core.X3Model)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim j As Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim prevUB As Integer</SourceLine>
   <SourceLine>Dim bDrawing As Boolean</SourceLine>
   <SourceLine>Dim prevTIndex As Integer = -1</SourceLine>
   <SourceLine>Dim prevSIndex As Integer = -1</SourceLine>
   <SourceLine>Dim transPoly() As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim currMat As Integer = - 1 ' current material type used for polygon: 0=RGBA, 1=Texture, 2=Material</SourceLine>
   <SourceLine>Dim currIndex As Integer = -1 ' current material index</SourceLine>
   <SourceLine>Dim texture As X3Core.X3Texture</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'OpenGL.glDisable OpenGL.GL_COLOR_MATERIAL ' disable overwriting of material properties with vertex colors</SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_COLOR_MATERIAL ' enable use vertex colors</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glPushMatrix ' save matrix</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glTranslatef model.Position.X, model.Position.Y, model.Position.Z ' set the model's position</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>X3_SetRotation(model.Rotation) ' apply the model's rotation</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' have we rendered this model previous innto an OpenGL display list?</SourceLine>
   <SourceLine>if (model.OGLName &gt; 0) and not model.Invalidate then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glCallList model.OGLName 'yes, so render this existing list</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Redim model.SpritePolygons(-1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' is the model loaded in OpenGL memory and invalid?</SourceLine>
   <SourceLine>if (model.OGLName &gt; 0) and model.Invalidate then</SourceLine>
   <SourceLine>' yes, so first remove the model from OpenGL memory</SourceLine>
   <SourceLine>OpenGL.glDeleteLists(model.OGLName, 1)</SourceLine>
   <SourceLine>model.OGLName = 0</SourceLine>
   <SourceLine>model.Invalidate = false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' create a new OpenGL display list</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.OGLName = OpenGL.glGenLists(1)</SourceLine>
   <SourceLine>OpenGL.glNewList model.OGLName, OpenGL.GL_COMPILE</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' draw polygons</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' FIRST WE DRAW THE OPAQUE POLYGONS</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>prevUB = -1</SourceLine>
   <SourceLine>bDrawing = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to model.Polygon.Ubound ' loop through all the polygons</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.Polygon(i) ' get the next polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' only draw if opaque</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if ((poly.TIndex &gt;= 0) and  model.Texture(poly.TIndex).Transparent)  then ' transparent texture?</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' this is a polygon with a transparent texture, so store for later rendering</SourceLine>
   <SourceLine>transPoly.Append poly</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif (poly.MIndex &gt;= 0) and (model.Material(poly.MIndex).Ambient.Alpha &lt; 1) then ' transparent material?</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' this is a polygon with a transparent material, so store for later rendering</SourceLine>
   <SourceLine>transPoly.Append poly</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif (poly.CIndex &gt;= 0) and (model.ColorPal(poly.CIndex).Alpha &lt; 1) then ' transparent color?</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' this is a polygon with a transparent color, so store for later rendering</SourceLine>
   <SourceLine>transPoly.Append poly</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif (poly.SIndex &gt;= 0) then ' sprite?</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' this is a polygon with a sprite, so store for later rendering</SourceLine>
   <SourceLine>' sprites are not rendered as part of the display list because it is almost always invalidated</SourceLine>
   <SourceLine>model.SpritePolygons.Append poly</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if (poly.VIndex.Ubound &lt;&gt; prevUB) or (prevTIndex &lt;&gt; poly.TIndex) then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if bDrawing then</SourceLine>
   <SourceLine>OpenGL.glEnd ' end drawing polygons</SourceLine>
   <SourceLine>bDrawing = false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' bind to texture if needed BEFORE calling glBegin</SourceLine>
   <SourceLine>if (poly.TIndex &gt;= 0) and (poly.UVIndex.Ubound &gt;= poly.VIndex.Ubound) then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' first set up OpenGL for textures</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_TEXTURE_2D ' enable the use of textures</SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_COLOR_MATERIAL ' enable use vertex colors</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>X3_SetMaterial new X3Core.X3Material ' reset OpenGL's material settings</SourceLine>
   <SourceLine>OpenGL.glColor4d(1, 1, 1, 1) ' reset color to pure white</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>currMat = 1</SourceLine>
   <SourceLine>currIndex = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' now bind to texture</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>texture = model.Texture(poly.TIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' if texture not already loaded into OpenGL, let's first load the texture into OpenGL</SourceLine>
   <SourceLine>if texture.OGLName &lt;= 0 then</SourceLine>
   <SourceLine>texture.OGLName = X3_LoadRGBATexture(texture.RGBABitmap, texture.Width, texture.Height)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glBindTexture(OpenGL.GL_TEXTURE_2D, texture.OGLName) ' bind to the polygon's texture</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif (poly.MIndex &gt;= 0) then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set up OpenGL for materials</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glDisable OpenGL.GL_TEXTURE_2D ' disable the use of textures</SourceLine>
   <SourceLine>OpenGL.glDisable OpenGL.GL_COLOR_MATERIAL ' disable overwriting of material properties with vertex colors</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set up OpenGL for RGBA colors</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glDisable OpenGL.GL_TEXTURE_2D ' disable the use of textures</SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_COLOR_MATERIAL ' disable overwriting of material properties with vertex colors</SourceLine>
   <SourceLine>X3_SetMaterial new X3Core.X3Material ' reset OpenGL's material settings</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>select case poly.VIndex.Ubound</SourceLine>
   <SourceLine>case 2</SourceLine>
   <SourceLine>OpenGL.glBegin OpenGL.GL_TRIANGLES ' start drawing triangle polygons</SourceLine>
   <SourceLine>bDrawing = true</SourceLine>
   <SourceLine>case 3</SourceLine>
   <SourceLine>OpenGL.glBegin OpenGL.GL_QUADS ' start drawing quad polygons</SourceLine>
   <SourceLine>bDrawing = true</SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>prevUB = poly.VIndex.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.VIndex.Ubound &gt; 3 then</SourceLine>
   <SourceLine>OpenGL.glBegin OpenGL.GL_POLYGON ' start drawing quad polygons</SourceLine>
   <SourceLine>bDrawing = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>renderPolygon poly, currMat, currIndex</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.VIndex.Ubound &gt; 3 then</SourceLine>
   <SourceLine>OpenGL.glEnd ' end drawing polygons</SourceLine>
   <SourceLine>bDrawing = false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>prevTIndex = poly.TIndex ' store texture ID for next iteration</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if bDrawing then</SourceLine>
   <SourceLine>OpenGL.glEnd ' end drawing polygons</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' NOW WE DRAW THE TRANSPARENT POLYGONS</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>prevUB = -1</SourceLine>
   <SourceLine>bDrawing = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to transPoly.Ubound ' loop through all the transparent polygons</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = transPoly(i) ' get the next polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if (poly.VIndex.Ubound &lt;&gt; prevUB) or (prevTIndex &lt;&gt; poly.TIndex) then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if bDrawing then</SourceLine>
   <SourceLine>OpenGL.glEnd ' end drawing polygons</SourceLine>
   <SourceLine>bDrawing = false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' bind to texture if needed BEFORE calling glBegin</SourceLine>
   <SourceLine>if (poly.TIndex &gt;= 0) and (poly.UVIndex.Ubound &gt;= poly.VIndex.Ubound) then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' first set up OpenGL for textures</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_TEXTURE_2D ' enable the use of textures</SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_COLOR_MATERIAL ' enable use vertex colors</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>X3_SetMaterial new X3Core.X3Material ' reset OpenGL's material settings</SourceLine>
   <SourceLine>OpenGL.glColor4d(1, 1, 1, 1) ' reset color to pure white</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>currMat = 1</SourceLine>
   <SourceLine>currIndex = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' now bind to texture</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>texture = model.Texture(poly.TIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' if texture not already loaded into OpenGL, let's first load the texture into OpenGL</SourceLine>
   <SourceLine>if texture.OGLName &lt;= 0 then</SourceLine>
   <SourceLine>texture.OGLName = X3_LoadRGBATexture(texture.RGBABitmap, texture.Width, texture.Height)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glBindTexture(OpenGL.GL_TEXTURE_2D, model.Texture(poly.TIndex).OGLName) ' bind to the polygon's texture</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif (poly.MIndex &gt;= 0) then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set up OpenGL for materials</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glDisable OpenGL.GL_TEXTURE_2D ' disable the use of textures</SourceLine>
   <SourceLine>OpenGL.glDisable OpenGL.GL_COLOR_MATERIAL ' disable overwriting of material properties with vertex colors</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set up OpenGL for RGBA colors</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glDisable OpenGL.GL_TEXTURE_2D ' disable the use of textures</SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_COLOR_MATERIAL ' disable overwriting of material properties with vertex colors</SourceLine>
   <SourceLine>X3_SetMaterial new X3Core.X3Material ' reset OpenGL's material settings</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>select case poly.VIndex.Ubound</SourceLine>
   <SourceLine>case 2</SourceLine>
   <SourceLine>OpenGL.glBegin OpenGL.GL_TRIANGLES ' start drawing triangle polygons</SourceLine>
   <SourceLine>bDrawing = true</SourceLine>
   <SourceLine>case 3</SourceLine>
   <SourceLine>OpenGL.glBegin OpenGL.GL_QUADS ' start drawing quad polygons</SourceLine>
   <SourceLine>bDrawing = true</SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>prevUB = poly.VIndex.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.VIndex.Ubound &gt; 3 then</SourceLine>
   <SourceLine>OpenGL.glBegin OpenGL.GL_POLYGON ' start drawing quad polygons</SourceLine>
   <SourceLine>bDrawing = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>renderPolygon poly, currMat, currIndex</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.VIndex.Ubound &gt; 3 then</SourceLine>
   <SourceLine>OpenGL.glEnd ' end drawing polygons</SourceLine>
   <SourceLine>bDrawing = false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>prevTIndex = poly.TIndex ' store texture ID for next iteration</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if bDrawing then</SourceLine>
   <SourceLine>OpenGL.glEnd ' end drawing polygons</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEndList ' end of display list</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glCallList model.OGLName ' render the display  list</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' NOW WE DRAW THE SPRITE POLYGONS</SourceLine>
   <SourceLine>' because sprites change all the time and invalidates the polygons linked to them, so there is no point in rendering them as part of the display list</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if model.SpritePolygons.Ubound &gt;= 0 then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if currMat &lt;&gt; 1 then ' currently using textures?</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' no, so set up OpenGL for textures</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_TEXTURE_2D ' enable the use of textures</SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_COLOR_MATERIAL ' enable use vertex colors</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>X3_SetMaterial new X3Core.X3Material ' reset OpenGL's material settings</SourceLine>
   <SourceLine>OpenGL.glColor4d(1, 1, 1, 1) ' reset color to pure white</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>prevSIndex = -1</SourceLine>
   <SourceLine>bDrawing = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to model.SpritePolygons.Ubound ' loop through all the transparent polygons</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.SpritePolygons(i) ' get the next polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' bind to sprite sheet of the sprite</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if prevSIndex &lt;&gt; poly.SIndex then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if bDrawing then</SourceLine>
   <SourceLine>OpenGL.glEnd ' end drawing polygons</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' load spritesheet into OpenGL memory</SourceLine>
   <SourceLine>if model.Sprite(poly.SIndex).SpriteSheet.OGLName &lt;= 0 then</SourceLine>
   <SourceLine>model.Sprite(poly.SIndex).SpriteSheet.OGLName = X3_LoadRGBATexture(model.Sprite(poly.SIndex).SpriteSheet.RGBABitmap, model.Sprite(poly.SIndex).SpriteSheet.Width, model.Sprite(poly.SIndex).SpriteSheet.Height)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glBindTexture(OpenGL.GL_TEXTURE_2D, model.Sprite(poly.SIndex).SpriteSheet.OGLName) ' bind to the polygon's texture</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glBegin OpenGL.GL_QUADS ' start drawing quad polygons</SourceLine>
   <SourceLine>bDrawing = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>OpenGL.glTexCoord2d model.UVMap(poly.UVIndex(j)).U, model.UVMap(poly.UVIndex(j)).V ' set the texture UV-coordinates for next vertex</SourceLine>
   <SourceLine>OpenGL.glVertex3d model.Vertex(poly.VIndex(j)).X, model.Vertex(poly.VIndex(j)).Y, model.Vertex(poly.VIndex(j)).Z ' add the vertex to the OpenGL vertex list</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>prevSIndex = poly.SIndex ' store sprite ID for next iteration</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if bDrawing then</SourceLine>
   <SourceLine>OpenGL.glEnd ' end drawing polygons</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glPopMatrix ' restore matrix</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>X3_RotateWithXY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub X3_RotateWithXY(q As X3Quaternion, xAngle As Double, yAngle As Double)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result As new X3Quaternion</SourceLine>
   <SourceLine>Dim tmpQuat As new X3Quaternion</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' Formula: [new quaternion] = [x-axis rotation quaternion] x [y-axis rotation quaternion] x [self]</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' apply pitch rotation (around x-axis)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if xAngle &lt;&gt; 0 then</SourceLine>
   <SourceLine>tmpQuat.FromEulerRotation(1, 0, 0, xAngle)</SourceLine>
   <SourceLine>result.Multiply(tmpQuat)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' apply yaw rotation (around y-axis)</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>if yAngle &lt;&gt; 0 then</SourceLine>
   <SourceLine>tmpQuat.FromEulerRotation(0, 1, 0, yAngle)</SourceLine>
   <SourceLine>result.Multiply(tmpQuat)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result.Multiply(q) ' multiply result rotation quaternion with give quaternion</SourceLine>
   <SourceLine>result.Normalize ' normalize result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' assign result to given quaternion</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>q.W = result.W</SourceLine>
   <SourceLine>q.X = result.X</SourceLine>
   <SourceLine>q.Y = result.Y</SourceLine>
   <SourceLine>q.Z = result.Z</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>q As X3Quaternion, xAngle As Double, yAngle As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>X3_SetMaterial</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub X3_SetMaterial(material As X3Core.X3Material)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim matMB As MemoryBlock</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set ambient values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>matMB = material.Ambient.GetMemoryBlock()</SourceLine>
   <SourceLine>OpenGL.glMaterialfv(OpenGL.GL_FRONT, OpenGL.GL_AMBIENT, matMB) ' apply ambient values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set diffuse values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>matMB = material.Diffuse.GetMemoryBlock()</SourceLine>
   <SourceLine>OpenGL.glMaterialfv(OpenGL.GL_FRONT, OpenGL.GL_DIFFUSE, matMB) ' apply diffuse values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set specular values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>matMB = material.Specular.GetMemoryBlock()</SourceLine>
   <SourceLine>OpenGL.glMaterialfv(OpenGL.GL_FRONT, OpenGL.GL_SPECULAR, matMB) ' apply specular values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set shininess value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glMaterialf(OpenGL.GL_FRONT_AND_BACK, OpenGL.GL_SHININESS, material.Shininess) ' apply shininess values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>material As X3Core.X3Material</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>X3_SetPerspective</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub X3_SetPerspective(Surface As OpenGLSurface, fov As Double = 60.0, zNear As Double = 1, zFar As Double = 100)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glViewport 0, 0, Surface.Width, Surface.Height ' set the viewport rectangle</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set up the perspective projection settings</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glMatrixMode OpenGL.GL_PROJECTION ' select the projection matrix</SourceLine>
   <SourceLine>OpenGL.glLoadIdentity ' clear the projection matrix</SourceLine>
   <SourceLine>OpenGL.gluPerspective fov, Surface.Width / Surface.Height, zNear, zFar ' set up our own custom projection matrix</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' select and reset the modelview matrix</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glMatrixMode OpenGL.GL_MODELVIEW ' select the modelview matrix</SourceLine>
   <SourceLine>OpenGL.glLoadIdentity ' clear the modelview matrix</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Surface As OpenGLSurface, fov As Double = 60.0, zNear As Double = 1, zFar As Double = 100</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>X3_SetRotation</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub X3_SetRotation(rotation As X3Quaternion)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim angle As Double ' Euler angle of rotation</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>angle = ACos(rotation.w) * 2 * X3_180OverPi ' calculate angle from quaternion</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glRotated angle, rotation.x, rotation.y, rotation.z ' apply Euler rotation with OpenGL</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>rotation As X3Quaternion</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>X3_Str</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function X3_Str(d As Double) As String</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if (d \ 1) = d then // whole number?</SourceLine>
   <SourceLine>return Str(d, "-0")</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>return Str(d, "-0.#######")</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>d As Double</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>X3_PickPolygon</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function X3_PickPolygon(model As X3Core.X3Model, x As Integer, y As Integer) As X3Core.X3Polygon</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim j As Integer</SourceLine>
   <SourceLine>Dim pixelData As New MemoryBlock(4)</SourceLine>
   <SourceLine>Dim pickIndex As Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim colMB As new MemoryBlock(4)</SourceLine>
   <SourceLine>Dim result As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim prevUB As Integer</SourceLine>
   <SourceLine>Dim bDrawing As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glDisable OpenGL.GL_LIGHTING ' disable lighting</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glPushMatrix ' save matrix</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' apply the model's rotation</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>X3_SetRotation(model.Rotation)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' clear the background and depth buffer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glClearColor(0, 0, 0, 1)</SourceLine>
   <SourceLine>OpenGL.glClear(OpenGL.GL_COLOR_BUFFER_BIT + OpenGL.GL_DEPTH_BUFFER_BIT)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glPolygonMode(OpenGL.GL_FRONT, OpenGL.GL_FILL) ' draw filled polygons</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' render the polygon map</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>prevUB = -1</SourceLine>
   <SourceLine>bDrawing = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to model.Polygon.Ubound ' loop through all the polygons</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.Polygon(i) ' get the next polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if (poly.VIndex.Ubound &lt;&gt; prevUB) then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if bDrawing then</SourceLine>
   <SourceLine>OpenGL.glEnd ' end drawing polygons</SourceLine>
   <SourceLine>bDrawing = false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>select case poly.VIndex.Ubound</SourceLine>
   <SourceLine>case 2</SourceLine>
   <SourceLine>OpenGL.glBegin OpenGL.GL_TRIANGLES ' start drawing triangle polygons</SourceLine>
   <SourceLine>bDrawing = true</SourceLine>
   <SourceLine>case 3</SourceLine>
   <SourceLine>OpenGL.glBegin OpenGL.GL_QUADS ' start drawing quad polygons</SourceLine>
   <SourceLine>bDrawing = true</SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>prevUB = poly.VIndex.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.VIndex.Ubound &gt; 3 then</SourceLine>
   <SourceLine>OpenGL.glBegin OpenGL.GL_POLYGON ' start drawing quad polygons</SourceLine>
   <SourceLine>bDrawing = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' set the map color of the polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>colMB.UInt32Value(0) = i + 1</SourceLine>
   <SourceLine>OpenGL.glColor3ub(colMB.UInt8Value(0), colMB.UInt8Value(1), colMB.UInt8Value(2))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' add the vertexes of the polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for j = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>OpenGL.glVertex3d model.Vertex(poly.VIndex(j)).X, model.Vertex(poly.VIndex(j)).Y, model.Vertex(poly.VIndex(j)).Z</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.VIndex.Ubound &gt; 3 then</SourceLine>
   <SourceLine>OpenGL.glEnd ' end drawing polygons</SourceLine>
   <SourceLine>bDrawing = false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if bDrawing then</SourceLine>
   <SourceLine>OpenGL.glEnd ' end drawing polygons</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' get the pixel value at the given (x, y) position</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glReadPixels(x, y, 1, 1, OpenGL.GL_RGB, OpenGL.GL_UNSIGNED_BYTE, pixelData)</SourceLine>
   <SourceLine>pickIndex = pixelData.UInt32Value(0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' did we get a pixel at (x, y) other than black?</SourceLine>
   <SourceLine>if pickIndex &gt; 0 then</SourceLine>
   <SourceLine>result = model.Polygon(pickIndex - 1)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glPopMatrix ' restore matrix</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glEnable OpenGL.GL_LIGHTING ' enable lighting</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model, x As Integer, y As Integer</ItemParams>
  <ItemResult>X3Core.X3Polygon</ItemResult>
 </Method>
 <Method>
  <ItemName>X3_ModelToJSON</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function X3_ModelToJSON(model As X3Core.X3Model) As String</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim addedChild As Boolean</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim j As Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim text As X3Core.X3Texture</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim firstValue As Boolean</SourceLine>
   <SourceLine>Dim modelJSON() As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' this method generates X3 Data Format JSON from an X3Model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>addedChild = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append "{"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append """x3model"":{"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' colorpal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if model.ColorPal.Ubound &gt;= 0 then</SourceLine>
   <SourceLine>modelJSON.Append """colorpal"":["</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.ColorPal(0).Red)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.ColorPal(0).Green)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.ColorPal(0).Blue)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.ColorPal(0).Alpha)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 1 to model.ColorPal.Ubound</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.ColorPal(i).Red)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.ColorPal(i).Green)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.ColorPal(i).Blue)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.ColorPal(i).Alpha)</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append "]" ' vertex</SourceLine>
   <SourceLine>addedChild = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' material</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if model.Material.Ubound &gt;= 0 then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if addedChild then</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append """material"":["</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to model.Material.Ubound</SourceLine>
   <SourceLine>if i &gt; 0 then</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Material(i).Ambient.Red)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Material(i).Ambient.Green)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Material(i).Ambient.Blue)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Material(i).Ambient.Alpha)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Material(i).Diffuse.Red)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Material(i).Diffuse.Green)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Material(i).Diffuse.Blue)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Material(i).Diffuse.Alpha)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Material(i).Specular.Red)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Material(i).Specular.Green)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Material(i).Specular.Blue)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Material(i).Specular.Alpha)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Material(i).Shininess)</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append "]" ' vertex</SourceLine>
   <SourceLine>addedChild = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' vertex</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if model.Vertex.Ubound &gt;= 0 then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if addedChild then</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append """vertex"":["</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Vertex(0).X)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Vertex(0).Y)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Vertex(0).Z)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 1 to model.Vertex.Ubound</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Vertex(i).X)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Vertex(i).Y)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Vertex(i).Z)</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append "]" ' vertex</SourceLine>
   <SourceLine>addedChild = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' uvmap</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if model.UVMap.Ubound &gt;= 0 then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if addedChild then</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append """uvmap"":["</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.UVMap(0).U)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.UVMap(0).V)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 1 to model.UVMap.Ubound</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.UVMap(i).U)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.UVMap(i).V)</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append "]" ' vertex</SourceLine>
   <SourceLine>addedChild = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' normal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if model.Normal.Ubound &gt;= 0 then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if addedChild then</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append """normal"":["</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Normal(0).X)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Normal(0).Y)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Normal(0).Z)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 1 to model.Normal.Ubound</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Normal(i).X)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Normal(i).Y)</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append X3_Str(model.Normal(i).Z)</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append "]" ' normal</SourceLine>
   <SourceLine>addedChild = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if model.Polygon.Ubound &gt;= 0 then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if addedChild then</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append """polygon"":["</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to model.Polygon.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly = model.Polygon(i)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if i &gt; 0 then</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append "{" ' polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>firstValue = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.TIndex &gt;= 0 then</SourceLine>
   <SourceLine>modelJSON.Append """ti"":" + Str(poly.TIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append """uvi"":["</SourceLine>
   <SourceLine>modelJSON.Append Str(poly.UVIndex(0))</SourceLine>
   <SourceLine>for j = 1 to poly.UVIndex.Ubound</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append Str(poly.UVIndex(j))</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine>modelJSON.Append "]"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>firstValue = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif poly.MIndex &gt;= 0 then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append """mi"":" + Str(poly.MIndex)</SourceLine>
   <SourceLine>firstValue = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif poly.CIndex &gt;= 0 then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append """ci"":" + Str(poly.CIndex)</SourceLine>
   <SourceLine>firstValue = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.NIndex &gt;= 0 then</SourceLine>
   <SourceLine>if not firstValue then</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>modelJSON.Append """ni"":" + Str(poly.NIndex)</SourceLine>
   <SourceLine>firstValue = false</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not firstValue then</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>modelJSON.Append """vi"":["</SourceLine>
   <SourceLine>modelJSON.Append Str(poly.VIndex(0))</SourceLine>
   <SourceLine>for j = 1 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append Str(poly.VIndex(j))</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine>modelJSON.Append "]"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if poly.VNIndex.Ubound &gt;= 0 then</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append """vni"":["</SourceLine>
   <SourceLine>modelJSON.Append Str(poly.VNIndex(0))</SourceLine>
   <SourceLine>for j = 1 to poly.VNIndex.Ubound</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>modelJSON.Append Str(poly.VNIndex(j))</SourceLine>
   <SourceLine>next j</SourceLine>
   <SourceLine>modelJSON.Append "]"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append "}"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append "]" ' vertex</SourceLine>
   <SourceLine>addedChild = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' texture</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if model.Texture.Ubound &gt;= 0 then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if addedChild then</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append """texture"":["</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to model.Texture.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>text = model.Texture(i)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if i &gt; 0 then</SourceLine>
   <SourceLine>modelJSON.Append ","</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pic = X3_PictureFromTexture(text)</SourceLine>
   <SourceLine>modelJSON.Append """" + EncodeBase64(pic.GetData(Picture.FormatPNG), 0) + """"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append "]" ' vertex</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>addedChild = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append "}" ' x3model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>modelJSON.Append "}" ' root</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return Join(modelJSON, "")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>model As X3Core.X3Model</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>X3_180OverPi</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>X3_180OverPi</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>57.295779513082321</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>X3_PiOver180</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>X3_PiOver180</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>0.017453292519943</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
</block>
<block type="BuildStepsList" ID="1963239423">
 <ObjName>Linux</ObjName>
 <ObjContainerID>112685055</ObjContainerID>
</block>
<block type="BuildProjectStep" ID="580089855">
 <ObjName>Build</ObjName>
 <ObjContainerID>1963239423</ObjContainerID>
</block>
<block type="BuildStepsList" ID="1278781439">
 <ObjName>Mac OS X</ObjName>
 <ObjContainerID>112685055</ObjContainerID>
</block>
<block type="BuildProjectStep" ID="1292869631">
 <ObjName>Build</ObjName>
 <ObjContainerID>1278781439</ObjContainerID>
</block>
<block type="BuildStepsList" ID="1931778047">
 <ObjName>Windows</ObjName>
 <ObjContainerID>112685055</ObjContainerID>
</block>
<block type="BuildProjectStep" ID="290813951">
 <ObjName>Build</ObjName>
 <ObjContainerID>1931778047</ObjContainerID>
</block>
<block type="BuildAutomation" ID="112685055">
 <ObjName>Build Automation</ObjName>
 <ObjContainerID>0</ObjContainerID>
</block>
<block type="Module" ID="1379397631">
 <ObjName>X3Vector</ObjName>
 <ObjContainerID>639109119</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Clone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Clone() As X3Core.X3Vector</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim vec as new X3Core.X3Vector(X, Y, Z)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return vec</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>X3Core.X3Vector</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(initX As Double, initY As Double, initZ As Double)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' configure vector with initial values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>X = initX</SourceLine>
   <SourceLine>Y = initY</SourceLine>
   <SourceLine>Z = initZ</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>initX As Double, initY As Double, initZ As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetMemoryBlock</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetMemoryBlock() As MemoryBlock</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim mblock As new MemoryBlock(16)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' store the vector values in the memory block</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mblock.SingleValue(0) = X</SourceLine>
   <SourceLine>mblock.SingleValue(4) = Y</SourceLine>
   <SourceLine>mblock.SingleValue(8) = Z</SourceLine>
   <SourceLine>mblock.SingleValue(12) = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return mblock ' return the memory block</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>MemoryBlock</ItemResult>
 </Method>
 <Method>
  <ItemName>Normalize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Normalize()</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim m As Double ' magnitude of vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m =  Sqrt(x^2 + y^2 + z^2) ' calculate the magnitude of the vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' now calculate normalized values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if m &gt; 0 then</SourceLine>
   <SourceLine>x =  x / m</SourceLine>
   <SourceLine>y = y / m</SourceLine>
   <SourceLine>z = z / m</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>X</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>X As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>X As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Y</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Y As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Y As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Z</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Z As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Z As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>x</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>y</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Z</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1570861055">
 <ObjName>X3Color</ObjName>
 <ObjContainerID>639109119</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Clone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Clone() As X3Core.X3Color</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim col As new X3Color.X3Color(Red, Green, Blue, Alpha)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return col</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>X3Core.X3Color</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(initRed As Double, initGreen As Double, initBlue As Double, initAlpha As Double = 1)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' configure color with initial values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Red = initRed</SourceLine>
   <SourceLine>Green = initGreen</SourceLine>
   <SourceLine>Blue = initBlue</SourceLine>
   <SourceLine>Alpha = initAlpha</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>initRed As Double, initGreen As Double, initBlue As Double, initAlpha As Double = 1</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetMemoryBlock</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetMemoryBlock() As MemoryBlock</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim mblock As new MemoryBlock(16)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' store the color values in the memory block</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mblock.SingleValue(0) = Red</SourceLine>
   <SourceLine>mblock.SingleValue(4) = Green</SourceLine>
   <SourceLine>mblock.SingleValue(8) = Blue</SourceLine>
   <SourceLine>mblock.SingleValue(12) = Alpha</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return mblock ' return the memory block</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>MemoryBlock</ItemResult>
 </Method>
 <Property>
  <ItemName>Alpha</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Alpha As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Alpha As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Blue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Blue As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Blue As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Green</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Green As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Green As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Red</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Red As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Red As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Alpha</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Blue</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Green</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Red</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1954437119">
 <ObjName>X3Polygon</ObjName>
 <ObjContainerID>639109119</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>CalculateNormal</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub CalculateNormal()</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim v1X As Double ' temporary value used during calculations</SourceLine>
   <SourceLine>Dim v1Y As Double ' temporary value used during calculations</SourceLine>
   <SourceLine>Dim v1Z As Double ' temporary value used during calculations</SourceLine>
   <SourceLine>Dim v2X As Double ' temporary value used during calculations</SourceLine>
   <SourceLine>Dim v2Y As Double ' temporary value used during calculations</SourceLine>
   <SourceLine>Dim v2Z As Double ' temporary value used during calculations</SourceLine>
   <SourceLine>Dim cpX As Double ' cross product x</SourceLine>
   <SourceLine>Dim cpY As Double ' cross product y</SourceLine>
   <SourceLine>Dim cpZ As Double ' cross product z</SourceLine>
   <SourceLine>Dim m As Double ' magnitude of vector</SourceLine>
   <SourceLine>Dim n As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' calculate polygon surface vectors</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>v1X = ParentModel.Vertex(VIndex(1)).X - ParentModel.Vertex(VIndex(0)).X</SourceLine>
   <SourceLine>v1Y = ParentModel.Vertex(VIndex(1)).Y - ParentModel.Vertex(VIndex(0)).Y</SourceLine>
   <SourceLine>v1Z = ParentModel.Vertex(VIndex(1)).Z - ParentModel.Vertex(VIndex(0)).Z</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>v2X = ParentModel.Vertex(VIndex(2)).X - ParentModel.Vertex(VIndex(1)).X</SourceLine>
   <SourceLine>v2Y = ParentModel.Vertex(VIndex(2)).Y - ParentModel.Vertex(VIndex(1)).Y</SourceLine>
   <SourceLine>v2Z = ParentModel.Vertex(VIndex(2)).Z - ParentModel.Vertex(VIndex(1)).Z</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' calculate cross product</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cpX = v1Y * v2Z - v1Z * v2Y</SourceLine>
   <SourceLine>cpY = v1Z * v2X - v1X * v2Z</SourceLine>
   <SourceLine>cpZ = v1X * v2Y - v1Y * v2X</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' normalize</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m =  Sqrt(cpX^2 + cpY^2 + cpZ^2)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' now calculate normalized values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if (NIndex &lt; 0) or (NIndex &gt; ParentModel.Normal.Ubound) then</SourceLine>
   <SourceLine>n = new X3Core.X3Vector(0, 0, 0)</SourceLine>
   <SourceLine>ParentModel.Normal.Append n</SourceLine>
   <SourceLine>NIndex = ParentModel.Normal.Ubound</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>n = ParentModel.Normal(NIndex)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if m &gt; 0 then</SourceLine>
   <SourceLine>n.X = cpX / m</SourceLine>
   <SourceLine>n.Y = cpY / m</SourceLine>
   <SourceLine>n.Z = cpZ / m</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Clone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Clone() As X3Core.X3Polygon</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim poly As new X3Core.X3Polygon(ParentModel)</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly.CIndex = CIndex</SourceLine>
   <SourceLine>poly.MIndex = MIndex</SourceLine>
   <SourceLine>poly.NIndex = NIndex</SourceLine>
   <SourceLine>poly.ParentModel = ParentModel</SourceLine>
   <SourceLine>poly.Selected = Selected</SourceLine>
   <SourceLine>poly.SIndex = SIndex</SourceLine>
   <SourceLine>poly.SpriteImageIndex = mSpriteImageIndex</SourceLine>
   <SourceLine>poly.TIndex = TIndex</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to UVIndex.Ubound</SourceLine>
   <SourceLine>poly.UVIndex.Append UVIndex(i)</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to VIndex.Ubound</SourceLine>
   <SourceLine>poly.VIndex.Append VIndex(i)</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to VNIndex.Ubound</SourceLine>
   <SourceLine>poly.VNIndex.Append VNIndex(i)</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return poly</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>X3Core.X3Polygon</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(parent As X3Core.X3Model)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim n As new X3Core.X3Vector(0, 0, 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ParentModel = parent</SourceLine>
   <SourceLine>ParentModel.Normal.Append n</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>NIndex = ParentModel.Normal.Ubound</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>parent As X3Core.X3Model</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(parent As X3Core.X3Model, normalX As Double, normalY As Double, normalZ As Double)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim n As new X3Core.X3Vector(normalX, normalY, normalZ)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ParentModel = parent</SourceLine>
   <SourceLine>ParentModel.Normal.Append n</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>NIndex = ParentModel.Normal.Ubound</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>parent As X3Core.X3Model, normalX As Double, normalY As Double, normalZ As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetCenter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetCenter() As X3Core.X3Vector</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim xTot As Double</SourceLine>
   <SourceLine>Dim yTot As Double</SourceLine>
   <SourceLine>Dim zTot As Double</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim totVerts As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>xTot = 0</SourceLine>
   <SourceLine>yTot = 0</SourceLine>
   <SourceLine>zTot = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to VIndex.Ubound</SourceLine>
   <SourceLine>xTot = xTot + ParentModel.Vertex(VIndex(i)).X</SourceLine>
   <SourceLine>yTot = yTot + ParentModel.Vertex(VIndex(i)).Y</SourceLine>
   <SourceLine>zTot = zTot + ParentModel.Vertex(VIndex(i)).Z</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>totVerts = VIndex.Ubound + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return new X3Core.X3Vector(xTot / totVerts, yTot / totVerts, zTot / totVerts)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>X3Core.X3Vector</ItemResult>
 </Method>
 <Method>
  <ItemName>NextSpriteImage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub NextSpriteImage()</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim s As X3Core.X3Sprite</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if SIndex &gt;= 0 then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>s = ParentModel.Sprite(SIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SpriteImageIndex = SpriteImageIndex + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if SpriteImageIndex &gt; s.SpriteMap.Ubound then</SourceLine>
   <SourceLine>SpriteImageIndex = 0</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>CIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CIndex As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CIndex As Integer = -1</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>MIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>MIndex As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>MIndex As Integer = -1</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>mParentModel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mParentModel As WeakRef</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mParentModel As WeakRef</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>mSpriteImageIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mSpriteImageIndex As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mSpriteImageIndex As Integer = -1</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>NIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>NIndex As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>NIndex As Integer = -1</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>ParentModel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ParentModel As X3Core.X3Model</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ParentModel As X3Core.X3Model</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>mParentModel = New WeakRef(value)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return X3Model(mParentModel.Value)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Selected</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Selected As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Selected As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>SIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SIndex As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SIndex As Integer = -1</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>SpriteImageCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SpriteImageCount As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SpriteImageCount As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Dim cnt As Integer</SourceLine>
   <SourceLine>Dim s As X3Core.X3Sprite</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cnt = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if SIndex &gt;= 0 then</SourceLine>
   <SourceLine>s = ParentModel.Sprite(SIndex)</SourceLine>
   <SourceLine>cnt = s.SpriteMap.Ubound + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return cnt</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>SpriteImageIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SpriteImageIndex As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SpriteImageIndex As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>Dim model As X3Core.X3Model</SourceLine>
   <SourceLine>Dim s As X3Core.X3Sprite</SourceLine>
   <SourceLine>Dim uvc As X3Core.X3UVCoordinate</SourceLine>
   <SourceLine>Dim sc As X3Core.X3SpriteCoordinate</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model = ParentModel</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if SIndex &gt;= 0 then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>s = model.Sprite(SIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mSpriteImageIndex = value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if (mSpriteImageIndex &lt;= s.SpriteMap.Ubound) and (mSpriteImageIndex &gt;= 0) then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sc = s.SpriteMap(mSpriteImageIndex)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>uvc = model.UVMap(UVIndex(0))</SourceLine>
   <SourceLine>uvc.U = sc.U1</SourceLine>
   <SourceLine>uvc.V = sc.V1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>uvc = model.UVMap(UVIndex(1))</SourceLine>
   <SourceLine>uvc.U = sc.U1</SourceLine>
   <SourceLine>uvc.V = sc.V2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>uvc = model.UVMap(UVIndex(2))</SourceLine>
   <SourceLine>uvc.U = sc.U2</SourceLine>
   <SourceLine>uvc.V = sc.V2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>uvc = model.UVMap(UVIndex(3))</SourceLine>
   <SourceLine>uvc.U = sc.U2</SourceLine>
   <SourceLine>uvc.V = sc.V1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return mSpriteImageIndex</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TIndex As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TIndex As Integer = -1</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>UVIndex()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>UVIndex() As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>UVIndex() As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>VIndex()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>VIndex() As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>VIndex() As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>VNIndex()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>VNIndex() As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>VNIndex() As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>CIndex</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>-1</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MIndex</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>-1</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>NIndex</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>-1</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Selected</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>SIndex</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>-1</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>SpriteImageCount</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>SpriteImageIndex</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TIndex</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>-1</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1788157951">
 <ObjName>X3Light</ObjName>
 <ObjContainerID>639109119</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(xPos As Double, yPos As Double, zPos As Double)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Position = new X3Vector(xPos, yPos, zPos) ' initialize the position of the light with the given values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' intialize the light properties with default values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Ambient = new X3Color(0.2, 0.2, 0.2, 1)</SourceLine>
   <SourceLine>Diffuse = new X3Color(1, 1, 1, 1)</SourceLine>
   <SourceLine>Specular = new X3Color(1, 1, 1, 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>xPos As Double, yPos As Double, zPos As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>Ambient</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Ambient As X3Color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Ambient As X3Color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Diffuse</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Diffuse As X3Color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Diffuse As X3Color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Position</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Position As X3Vector</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Position As X3Vector</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Specular</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Specular As X3Color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Specular As X3Color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1198876671">
 <ObjName>X3Model</ObjName>
 <ObjContainerID>639109119</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>AppendPolygon</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AppendPolygon(poly As X3Core.X3Polygon)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim firstUVIndex As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly.ParentModel = me</SourceLine>
   <SourceLine>Polygon.Append poly</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' if this is a sprite polygon, and the UV coordinates is not defined?</SourceLine>
   <SourceLine>if (poly.SIndex &gt;= 0) and (poly.UVIndex &lt;&gt; poly.VIndex) then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' yes, so let's add the UV coordinates for the sprite now</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Redim poly.UVIndex(-1)</SourceLine>
   <SourceLine>firstUVIndex = UVMap.Ubound + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to poly.VIndex.Ubound</SourceLine>
   <SourceLine>UVMap.Append new X3Core.X3UVCoordinate(0, 0)</SourceLine>
   <SourceLine>poly.UVIndex.Append (firstUVIndex + i)</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>poly As X3Core.X3Polygon</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Clone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Clone() As X3Core.X3Model</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim model As new X3Core.X3Model</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim poly As X3Core.X3Polygon</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to ColorPal.Ubound</SourceLine>
   <SourceLine>model.ColorPal.Append ColorPal(i).Clone</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.Invalidate = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to Material.Ubound</SourceLine>
   <SourceLine>model.Material.Append Material(i).Clone</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to Normal.Ubound</SourceLine>
   <SourceLine>model.Normal.Append Normal(i).Clone</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to Polygon.Ubound</SourceLine>
   <SourceLine>poly = Polygon(i).Clone</SourceLine>
   <SourceLine>poly.ParentModel = model</SourceLine>
   <SourceLine>model.Polygon.Append poly</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.Position = Position.Clone</SourceLine>
   <SourceLine>model.Rotation = Rotation.Clone</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to Sprite.Ubound</SourceLine>
   <SourceLine>model.Sprite.Append Sprite(i).Clone</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to Vertex.Ubound</SourceLine>
   <SourceLine>model.Vertex.Append Vertex(i).Clone</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to UVMap.Ubound</SourceLine>
   <SourceLine>model.UVMap.Append UVMap(i).Clone</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to Texture.Ubound</SourceLine>
   <SourceLine>model.Texture.Append Texture(i) ' textures cannot be cloned because it is linked to a bitmap in OpenGL memory</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return model</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>X3Core.X3Model</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Position = new X3Core.X3Vector(0, 0, 0) ' instantiate the default position at the origin</SourceLine>
   <SourceLine>Rotation = new X3Core.X3Quaternion() ' instantiate a default rotation quaternion</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>NextSpriteImage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub NextSpriteImage()</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to Polygon.Ubound</SourceLine>
   <SourceLine>Polygon(i).NextSpriteImage()</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Center</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Center(pos As X3Core.X3Vector = nil)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim centPos As X3Core.X3Vector</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim midX As Double</SourceLine>
   <SourceLine>Dim midY As Double</SourceLine>
   <SourceLine>Dim midZ As Double</SourceLine>
   <SourceLine>Dim xStep As Double</SourceLine>
   <SourceLine>Dim yStep As Double</SourceLine>
   <SourceLine>Dim zStep As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if pos = nil then</SourceLine>
   <SourceLine>centPos = new X3Core.X3Vector(0, 0, 0)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>centPos = pos</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>midX = 0</SourceLine>
   <SourceLine>midY = 0</SourceLine>
   <SourceLine>midZ = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to Vertex.Ubound</SourceLine>
   <SourceLine>midX = midX + Vertex(i).X</SourceLine>
   <SourceLine>midY = midY + Vertex(i).Y</SourceLine>
   <SourceLine>midZ = midZ + Vertex(i).Z</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>midX = midX / (Vertex.Ubound + 1)</SourceLine>
   <SourceLine>midY = midY / (Vertex.Ubound + 1)</SourceLine>
   <SourceLine>midZ = midZ / (Vertex.Ubound + 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>xStep = centPos.X - midX</SourceLine>
   <SourceLine>yStep = centPos.Y - midY</SourceLine>
   <SourceLine>zStep = centPos.Z - midZ</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to Vertex.Ubound</SourceLine>
   <SourceLine>Vertex(i).X = Vertex(i).X + xStep</SourceLine>
   <SourceLine>Vertex(i).Y = Vertex(i).Y + yStep</SourceLine>
   <SourceLine>Vertex(i).Z = Vertex(i).Z + zStep</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>pos As X3Core.X3Vector = nil</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Unitize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Unitize(pos As X3Core.X3Vector = nil)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim centPos As X3Core.X3Vector</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim midX As Double</SourceLine>
   <SourceLine>Dim midY As Double</SourceLine>
   <SourceLine>Dim midZ As Double</SourceLine>
   <SourceLine>Dim vertLen As Double</SourceLine>
   <SourceLine>Dim maxLen As Double</SourceLine>
   <SourceLine>Dim scale As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if pos = nil then</SourceLine>
   <SourceLine>centPos = new X3Core.X3Vector(0, 0, 0)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>centPos = pos</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>midX = 0</SourceLine>
   <SourceLine>midY = 0</SourceLine>
   <SourceLine>midZ = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to Vertex.Ubound</SourceLine>
   <SourceLine>midX = midX + Vertex(i).X</SourceLine>
   <SourceLine>midY = midY + Vertex(i).Y</SourceLine>
   <SourceLine>midZ = midZ + Vertex(i).Z</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>midX = midX / (Vertex.Ubound + 1)</SourceLine>
   <SourceLine>midY = midY / (Vertex.Ubound + 1)</SourceLine>
   <SourceLine>midZ = midZ / (Vertex.Ubound + 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>maxLen = 0</SourceLine>
   <SourceLine>for i = 0 to Vertex.Ubound</SourceLine>
   <SourceLine>vertLen = Sqrt((Vertex(i).X - midX)^2 + (Vertex(i).Y - midY)^2 + (Vertex(i).Z - midZ)^2)</SourceLine>
   <SourceLine>if vertLen &gt; maxLen then</SourceLine>
   <SourceLine>maxLen = vertLen</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' scale model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>scale = 1 / maxLen</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to Vertex.Ubound</SourceLine>
   <SourceLine>Vertex(i).X = Vertex(i).X / maxLen</SourceLine>
   <SourceLine>Vertex(i).Y = Vertex(i).Y / maxLen</SourceLine>
   <SourceLine>Vertex(i).Z = Vertex(i).Z / maxLen</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>pos As X3Core.X3Vector = nil</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>ColorPal()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ColorPal() As X3Core.X3Color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ColorPal() As X3Core.X3Color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Invalidate</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Invalidate As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Invalidate As Boolean = False</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Material()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Material() As X3Core.X3Material</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Material() As X3Core.X3Material</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Normal()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Normal() As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Normal() As X3Core.X3Vector</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>OGLName</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>OGLName As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>OGLName As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Polygon()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Polygon() As X3Polygon</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Polygon() As X3Polygon</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Position</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Position As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Position As X3Core.X3Vector</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Rotation</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Rotation As X3Quaternion</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Rotation As X3Quaternion</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Sprite()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sprite() As X3Core.X3Sprite</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Sprite() As X3Core.X3Sprite</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>SpritePolygons()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SpritePolygons() As X3Core.X3Polygon</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SpritePolygons() As X3Core.X3Polygon</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Texture()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Texture() As X3Core.X3Texture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Texture() As X3Core.X3Texture</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>UVMap()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>UVMap() As X3Core.X3UVCoordinate</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>UVMap() As X3Core.X3UVCoordinate</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Vertex()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Vertex() As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Vertex() As X3Core.X3Vector</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Invalidate</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>OGLName</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="223934463">
 <ObjName>X3Texture</ObjName>
 <ObjContainerID>639109119</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(texture As Picture)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim x As Integer</SourceLine>
   <SourceLine>Dim y As Integer</SourceLine>
   <SourceLine>Dim offset As Integer</SourceLine>
   <SourceLine>Dim textCol As Color</SourceLine>
   <SourceLine>Dim textMaskCol As Color</SourceLine>
   <SourceLine>Dim w As Integer</SourceLine>
   <SourceLine>Dim h As Integer</SourceLine>
   <SourceLine>Dim rgbMain As RGBSurface</SourceLine>
   <SourceLine>Dim rgbMask As RGBSurface</SourceLine>
   <SourceLine>Dim RGBABitmapPtr As Ptr</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Transparent = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' convert pictures to raw formats</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Width = texture.Width</SourceLine>
   <SourceLine>Height = texture.Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>RGBABitmap = new MemoryBlock(Height * Width * 4) ' create a MemoryBlock for the OpenGL RGBA format</SourceLine>
   <SourceLine>RGBABitmapPtr = RGBABitmap</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' loop through all the pixels of the picture</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>offset = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>h = Height - 1</SourceLine>
   <SourceLine>w = Width - 1</SourceLine>
   <SourceLine>rgbMain = texture.RGBSurface</SourceLine>
   <SourceLine>rgbMask = texture.Mask.RGBSurface</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for y = 0 to h</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for x = 0 to w</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' read the values of the current pixel</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>textCol = rgbMain.Pixel(x,y) ' get the color of the current pixel</SourceLine>
   <SourceLine>textMaskCol = rgbMask.Pixel(x, y) ' get the mask (alpha) color of the current pixel</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' store the color and alpha values into our OpenGL texture bitmap</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>RGBABitmapPtr.Byte(offset) = textCol.Red</SourceLine>
   <SourceLine>RGBABitmapPtr.Byte(offset + 1) = textCol.Green</SourceLine>
   <SourceLine>RGBABitmapPtr.Byte(offset + 2) = textCol.Blue</SourceLine>
   <SourceLine>RGBABitmapPtr.Byte(offset + 3) = 255 - textMaskCol.Red</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if RGBABitmapPtr.Byte(offset + 3) &lt; 255 then</SourceLine>
   <SourceLine>Transparent = true</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>offset = offset + 4 ' move to the next pixel in our OpenGL texture bitmap</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next x</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next y</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>TextureImage = texture</SourceLine>
   <SourceLine>OGLName = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'' load texture into OpenGL</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'if loadOpenGL then</SourceLine>
   <SourceLine>'OGLName = X3_LoadRGBATexture(RGBABitmap, Width, Height)</SourceLine>
   <SourceLine>'end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>texture As Picture</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Destructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Destructor()</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim texturePtr As MemoryBlock</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glFlush ' empty the OpenGL buffers</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' store the OpenGL named assigned to the texture in a MemoryBlock</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>texturePtr = new MemoryBlock(4)</SourceLine>
   <SourceLine>texturePtr.Long(0) = OGLName</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>OpenGL.glDeleteTextures(1, texturePtr) ' instruct OpenGL to remove texture from memory</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>Height</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Height As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Height As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>OGLName</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>OGLName As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>OGLName As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>RGBABitmap</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>RGBABitmap As MemoryBlock</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>RGBABitmap As MemoryBlock</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Transparent</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Transparent As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Transparent As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Width</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Width As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Width As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>TextureImage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextureImage As Picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextureImage As Picture</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>OGLName</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Transparent</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextureImage</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Picture</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1667782655">
 <ObjName>X3UVCoordinate</ObjName>
 <ObjContainerID>639109119</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Clone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Clone() As X3Core.X3UVCoordinate</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim coord As new X3UVCoordinate(U, V)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return coord</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>X3Core.X3UVCoordinate</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(initU As Double, initV As Double)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' configure coordinate with initial values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>U = initU</SourceLine>
   <SourceLine>V = initV</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>initU As Double, initV As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>U</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>U As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>U As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>V</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>V As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>V As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>U</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>V</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="762265599">
 <ObjName>X3Quaternion</ObjName>
 <ObjContainerID>639109119</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Clone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Clone() As X3Core.X3Quaternion</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim quat As new X3Core.X3Quaternion(W, X, Y, Z)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return quat</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>X3Core.X3Quaternion</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' initialize quaternion with a zero rotation</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>w = 1</SourceLine>
   <SourceLine>x = 0</SourceLine>
   <SourceLine>y = 0</SourceLine>
   <SourceLine>z = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(initW As Double, initX As Double, initY As Double, initZ As Double)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' configure quaternion with initial values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>W = initW</SourceLine>
   <SourceLine>X = initX</SourceLine>
   <SourceLine>Y = initY</SourceLine>
   <SourceLine>Z = initZ</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>initW As Double, initX As Double, initY As Double, initZ As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>FromEulerRotation</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub FromEulerRotation(x As Double, y As Double, z As Double, angle As Double)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' IMPORTANT: vector needs to be normalized prior to this call</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim halfAngle As Double</SourceLine>
   <SourceLine>Dim sinAng As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>halfAngle = (angle * X3_PiOver180)  / 2 ' calculate the half angle (convert radians to degrees)</SourceLine>
   <SourceLine>sinAng = sin(halfAngle) ' calculate sine of half angle</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.X = (x * sinAng)</SourceLine>
   <SourceLine>Me.Y = (y * sinAng)</SourceLine>
   <SourceLine>Me.Z = (z * sinAng)</SourceLine>
   <SourceLine>Me.W = cos(halfAngle)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>x As Double, y As Double, z As Double, angle As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Multiply</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Multiply(q As X3Quaternion)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim resultX As Double</SourceLine>
   <SourceLine>Dim resultY As Double</SourceLine>
   <SourceLine>Dim resultZ As Double</SourceLine>
   <SourceLine>Dim resultW As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' multiply this quaternion with the given quaternion</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>resultW = (w * q.w) - (x * q.x) - (y * q.y) - (z * q.z)</SourceLine>
   <SourceLine>resultX = (w * q.x) + (x * q.w) + (y * q.z) - (z * q.y)</SourceLine>
   <SourceLine>resultY = (w * q.y) - (x * q.z) +(y * q.w) + (z * q.x)</SourceLine>
   <SourceLine>resultZ = (w * q.z) +(x * q.y) - (y * q.x) +(z * q.w)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' store the results in this quaternion</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>x = resultX</SourceLine>
   <SourceLine>y = resultY</SourceLine>
   <SourceLine>z = resultZ</SourceLine>
   <SourceLine>w = resultW</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>q As X3Quaternion</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Normalize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Normalize()</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim m As Double ' magnitude of quaternion</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m = Sqrt(x^2 + y^2 + z^2 + w^2) ' calculate magnitude of quaternion</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' calculate normalized values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if m &gt; 0 then</SourceLine>
   <SourceLine>w = w / m</SourceLine>
   <SourceLine>x = x / m</SourceLine>
   <SourceLine>y = y / m</SourceLine>
   <SourceLine>z = z / m</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Pitch</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Pitch(angle As Double)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim tmpQuat As new X3Quaternion</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' Formula: [new quaternion] = [self] x [pitch quaternion]</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tmpQuat.FromEulerRotation(1, 0, 0, angle)</SourceLine>
   <SourceLine>Multiply tmpQuat</SourceLine>
   <SourceLine>Normalize</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>angle As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Roll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Roll(angle As Double)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim tmpQuat As new X3Quaternion</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' Formula: [new quaternion] = [self] x [roll quaternion]</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tmpQuat.FromEulerRotation(0, 0, 1, angle)</SourceLine>
   <SourceLine>Multiply tmpQuat</SourceLine>
   <SourceLine>Normalize</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>angle As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Yaw</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Yaw(angle As Double)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim tmpQuat As new X3Quaternion</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' Formula: [new quaternion] = [self] x [yaw quaternion]</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tmpQuat.FromEulerRotation(0, 1, 0, angle)</SourceLine>
   <SourceLine>Multiply tmpQuat</SourceLine>
   <SourceLine>Normalize</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>angle As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>W</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>W As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>W As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>X</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>X As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>X As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Y</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Y As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Y As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Z</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Z As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Z As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>w</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>x</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>y</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>z</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="921694207">
 <ObjName>X3Material</ObjName>
 <ObjContainerID>639109119</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Clone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Clone() As X3Core.X3Material</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim mat As new X3Core.X3Material</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mat.Ambient = Ambient.Clone</SourceLine>
   <SourceLine>mat.Diffuse = Diffuse.Clone</SourceLine>
   <SourceLine>mat.Shininess = Shininess</SourceLine>
   <SourceLine>mat.Specular = Specular.Clone</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return mat</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>X3Core.X3Material</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Ambient = new X3Color(0.2, 0.2, 0.2)</SourceLine>
   <SourceLine>Diffuse = new X3Color(0.8, 0.8, 0.8)</SourceLine>
   <SourceLine>Specular = new X3Color(0, 0, 0)</SourceLine>
   <SourceLine>Shininess = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>Ambient</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Ambient As X3Core.X3Color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Ambient As X3Core.X3Color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Diffuse</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Diffuse As X3Core.X3Color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Diffuse As X3Core.X3Color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Shininess</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shininess As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Shininess As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Specular</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Specular As X3Core.X3Color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Specular As X3Core.X3Color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Shininess</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="615909375">
 <ObjName>X3Sprite</ObjName>
 <ObjContainerID>639109119</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Clone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Clone() As X3Core.X3Sprite</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim sprite As New X3Core.X3Sprite</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = 0 to SpriteMap.Ubound</SourceLine>
   <SourceLine>sprite.SpriteMap.Append SpriteMap(i).Clone()</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sprite.SpriteSheet = SpriteSheet  ' textures cannot be cloned because it is linked to a bitmap in OpenGL memory</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return sprite</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>X3Core.X3Sprite</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(initSheet As Picture)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SpriteSheet = new X3Core.X3Texture(initSheet)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>initSheet As Picture</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(initSheet As Picture, spriteWidth As Integer, spriteHeight As Integer, imageCount As Integer)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim colCount As Integer</SourceLine>
   <SourceLine>Dim row As Integer</SourceLine>
   <SourceLine>Dim col As Integer</SourceLine>
   <SourceLine>Dim sc As X3Core.X3SpriteCoordinate</SourceLine>
   <SourceLine>Dim u1 As Double</SourceLine>
   <SourceLine>Dim v1 As Double</SourceLine>
   <SourceLine>Dim u2 As Double</SourceLine>
   <SourceLine>Dim v2 As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SpriteSheet = new X3Core.X3Texture(initSheet)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>colCount = spriteSheet.Width \ spriteWidth</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' loop through all the images on the sprite sheet and set up their UV coordinates</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>i = 0</SourceLine>
   <SourceLine>while i &lt; imageCount</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>row = i \ colCount</SourceLine>
   <SourceLine>col = i mod colCount</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>u1 = round((col * spriteWidth) / spriteSheet.Width * 100) / 100</SourceLine>
   <SourceLine>v1 = round((row * spriteHeight) / spriteSheet.Height * 100) / 100</SourceLine>
   <SourceLine>u2 = round(((col + 1) * spriteWidth) / spriteSheet.Width * 100) / 100</SourceLine>
   <SourceLine>v2 = round(((row + 1) * spriteHeight) / spriteSheet.Height * 100) / 100</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sc = new X3Core.X3SpriteCoordinate(u1, v1, u2, v2)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SpriteMap.Append sc</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>i = i + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>initSheet As Picture, spriteWidth As Integer, spriteHeight As Integer, imageCount As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>SpriteMap()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SpriteMap() As X3Core.X3SpriteCoordinate</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SpriteMap() As X3Core.X3SpriteCoordinate</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>SpriteSheet</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SpriteSheet As X3Core.X3Texture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SpriteSheet As X3Core.X3Texture</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="2113828863">
 <ObjName>X3SpriteCoordinate</ObjName>
 <ObjContainerID>639109119</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Clone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Clone() As X3Core.X3SpriteCoordinate</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim coord As new X3SpriteCoordinate(U1, V1, U2, V2)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return coord</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>X3Core.X3SpriteCoordinate</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(initU1 As Double, initV1 As Double, initU2 As Double, initV2 As Double)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' configure coordinates with initial values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>U1 = initU1</SourceLine>
   <SourceLine>V1 = initV1</SourceLine>
   <SourceLine>U2 = initU2</SourceLine>
   <SourceLine>V2 = initV2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>initU1 As Double, initV1 As Double, initU2 As Double, initV2 As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>U1</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>U1 As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>U1 As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>U2</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>U2 As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>U2 As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>V1</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>V1 As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>V1 As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>V2</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>V2 As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>V2 As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>U1</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>U2</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>V1</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>V2</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="Module" ID="1850959871">
 <ObjName>X3IO</ObjName>
 <ObjContainerID>639109119</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>LoadModel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LoadModel(modelFile As FolderItem) As X3Core.X3Model</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim model As X3Core.X3Model</SourceLine>
   <SourceLine>Dim tin As TextInputStream</SourceLine>
   <SourceLine>Dim modelJSON As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tin = TextInputStream.Open(modelFile) ' open file</SourceLine>
   <SourceLine>modelJSON = tin.ReadAll() ' load X3DF JSON from file</SourceLine>
   <SourceLine>tin.Close ' close file</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Model = modelFromJSON(modelJSON) ' parse data and create X3Model from JSON</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>modelFile As FolderItem</ItemParams>
  <ItemResult>X3Core.X3Model</ItemResult>
 </Method>
 <Method>
  <ItemName>SaveModel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SaveModel(modelFile As FolderItem, model As X3Core.X3Model)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim json as String</SourceLine>
   <SourceLine>Dim tout As TextOutputStream</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>json = X3_ModelToJSON(model) ' generate X3 Data Format JSON from X3Model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tout = TextOutputStream.Create(modelFile) ' open file for output</SourceLine>
   <SourceLine>tout.WriteLine json ' write X3DF JASON to file</SourceLine>
   <SourceLine>tout.Close ' close file</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>modelFile As FolderItem, model As X3Core.X3Model</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>modelFromJSON</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function modelFromJSON(modelJSON As String) As X3Core.X3Model</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim model As new X3Core.X3Model</SourceLine>
   <SourceLine>Dim pos As Integer</SourceLine>
   <SourceLine>Dim jsonMB As MemoryBlock</SourceLine>
   <SourceLine>Dim result As Boolean</SourceLine>
   <SourceLine>Dim mp As Ptr</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' this method renders X3 Data Format JSON into an X3Model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>jsonMB = modelJSON</SourceLine>
   <SourceLine>pos = 0</SourceLine>
   <SourceLine>mp = jsonMB</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result =matchX3Model(mp, pos, model) ' parse the JSON</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>modelJSON As String</ItemParams>
  <ItemResult>X3Core.X3Model</ItemResult>
 </Method>
 <Method>
  <ItemName>matchX3Model</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function matchX3Model(mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model) As Boolean</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result As Boolean</SourceLine>
   <SourceLine>Dim tmpStr As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model = new X3Core.X3Model</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 123 then ' {</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchString(mp, pos, tmpStr)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if tmpStr = "x3model" then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 58 then ' :</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 123 then ' {</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchString(mp, pos, tmpStr)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 58 then ' :</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>select case tmpStr</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "colorpal"</SourceLine>
   <SourceLine>result = matchColorPal(mp, pos, model)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "material"</SourceLine>
   <SourceLine>result = matchMaterial(mp, pos, model)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "normal"</SourceLine>
   <SourceLine>result = matchNormal(mp, pos, model)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "polygon"</SourceLine>
   <SourceLine>result = matchPolygon(mp, pos, model)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "vertex"</SourceLine>
   <SourceLine>result = matchVertex(mp, pos, model)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "texture"</SourceLine>
   <SourceLine>result = matchTexture(mp, pos, model)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "uvmap"</SourceLine>
   <SourceLine>result = matchUVMap(mp, pos, model)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case else ' unknown tag</SourceLine>
   <SourceLine>skipValue(mp, pos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 44 then ' ,</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = false ' malformed JSON</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loop until (mp.Byte(pos) = 125) or not result ' }</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>matchString</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function matchString(mp As Ptr, ByRef pos As Integer, ByRef value As String) As Boolean</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result As Boolean</SourceLine>
   <SourceLine>Dim sPos As Integer</SourceLine>
   <SourceLine>Dim ePos As Integer</SourceLine>
   <SourceLine>Dim valueMB As MemoryBlock</SourceLine>
   <SourceLine>Dim valuePtr As Ptr</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim idx As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = false</SourceLine>
   <SourceLine>value = ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 34 then ' "</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sPos = pos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;&gt; 34</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ePos = pos - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if ePos &gt;= sPos then</SourceLine>
   <SourceLine>valueMB = new MemoryBlock(ePos - sPos + 1)</SourceLine>
   <SourceLine>valuePtr = valueMB</SourceLine>
   <SourceLine>idx = 0</SourceLine>
   <SourceLine>for i = sPos to ePos</SourceLine>
   <SourceLine>valuePtr.Byte(idx) = mp.Byte(i)</SourceLine>
   <SourceLine>idx = idx + 1</SourceLine>
   <SourceLine>next i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>value = valueMB</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mp As Ptr, ByRef pos As Integer, ByRef value As String</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>matchPolygon</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function matchPolygon(mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model) As Boolean</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result As Boolean</SourceLine>
   <SourceLine>Dim p As X3Core.X3Polygon</SourceLine>
   <SourceLine>Dim tmpStr As String</SourceLine>
   <SourceLine>Dim bLoadedNormal As Boolean</SourceLine>
   <SourceLine>Dim tmpInt As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 91 then ' [</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 123 then ' {</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>p = new X3Core.X3Polygon()</SourceLine>
   <SourceLine>bLoadedNormal = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchString(mp, pos, tmpStr)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 58 then ' :</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>select case tmpStr</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "ci"</SourceLine>
   <SourceLine>result = matchInteger(mp, pos, tmpInt)</SourceLine>
   <SourceLine>p.CIndex = tmpInt</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "mi"</SourceLine>
   <SourceLine>result = matchInteger(mp, pos, tmpInt)</SourceLine>
   <SourceLine>p.MIndex = tmpInt</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "ni"</SourceLine>
   <SourceLine>result = matchInteger(mp, pos, tmpInt)</SourceLine>
   <SourceLine>p.NIndex = tmpInt</SourceLine>
   <SourceLine>bLoadedNormal = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "ti"</SourceLine>
   <SourceLine>result = matchInteger(mp, pos, tmpInt)</SourceLine>
   <SourceLine>p.TIndex = tmpInt</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "uvi"</SourceLine>
   <SourceLine>result = matchUVIndex(mp, pos, p)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "vi"</SourceLine>
   <SourceLine>result = matchVIndex(mp, pos, p)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case "vni"</SourceLine>
   <SourceLine>result = matchVNIndex(mp, pos, p)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case else ' unknown tag</SourceLine>
   <SourceLine>skipValue(mp, pos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 44 then ' ,</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = false ' malformed JSON</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loop until (mp.Byte(pos) = 125) or not result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if result then</SourceLine>
   <SourceLine>model.AppendPolygon p</SourceLine>
   <SourceLine>if not bLoadedNormal then</SourceLine>
   <SourceLine>p.CalculateNormal()</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 44 then ' ,</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loop until (mp.Byte(pos) = 93) or not result ' ]</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>matchTexture</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function matchTexture(mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model) As Boolean</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result As Boolean</SourceLine>
   <SourceLine>Dim tmpStr As String</SourceLine>
   <SourceLine>Dim t As X3Core.X3Texture</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 91 then ' [</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchString(mp, pos, tmpStr)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 44 then ' ,</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>t = new X3Core.X3Texture(Picture.FromData(DecodeBase64(tmpStr)))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.Texture.Append t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loop until (mp.Byte(pos) = 93) or not result ' ]</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>matchDouble</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function matchDouble(mp As Ptr, ByRef pos As Integer, ByRef value As Double) As Boolean</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim sPosInt As Integer</SourceLine>
   <SourceLine>Dim ePosInt As Integer</SourceLine>
   <SourceLine>Dim sPosFrac As Integer</SourceLine>
   <SourceLine>Dim ePosFrac As Integer</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim exp As Integer</SourceLine>
   <SourceLine>Dim minus As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>value = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 45 then ' minus</SourceLine>
   <SourceLine>pos = pos + 1 ' skip sign</SourceLine>
   <SourceLine>minus = -1</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>minus = 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sPosInt = pos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>while ((mp.Byte(pos) &gt;= 48) and (mp.Byte(pos) &lt;= 57))</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ePosInt = pos - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 46 then ' .</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sPosFrac = pos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>while ((mp.Byte(pos) &gt;= 48) and (mp.Byte(pos) &lt;= 57))</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ePosFrac = pos - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sPosFrac = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' integer part</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if ePosInt &gt;= sPosInt then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>exp = ePosInt - sPosInt</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = sPosInt to ePosInt</SourceLine>
   <SourceLine>value = value + (mp.Byte(i) - 48) * 10^exp</SourceLine>
   <SourceLine>exp = exp - 1</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' fraction part</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if sPosFrac &gt;= 0 then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>exp = 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for i = sPosFrac to ePosFrac</SourceLine>
   <SourceLine>value = value + (mp.Byte(i) - 48) / 10^exp</SourceLine>
   <SourceLine>exp = exp + 1</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>value = value * minus</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mp As Ptr, ByRef pos As Integer, ByRef value As Double</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>matchInteger</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function matchInteger(mp As Ptr, ByRef pos As Integer, ByRef value As Integer) As Boolean</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim sPos As Integer</SourceLine>
   <SourceLine>Dim ePos As Integer</SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim exp As Integer</SourceLine>
   <SourceLine>Dim minus As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>value = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 45 then ' minus</SourceLine>
   <SourceLine>pos = pos + 1 ' skip sign</SourceLine>
   <SourceLine>minus = -1</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>minus = 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sPos = pos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip first digit or sign symbol</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>while (mp.Byte(pos) &gt;= 48) and (mp.Byte(pos) &lt;= 57)</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ePos = pos - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if ePos &gt;= sPos then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>exp = ePos - sPos</SourceLine>
   <SourceLine>for i = sPos to ePos</SourceLine>
   <SourceLine>value = value + (mp.Byte(i) - 48) * 10^exp</SourceLine>
   <SourceLine>exp = exp - 1</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>value = value * minus</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return true</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mp As Ptr, ByRef pos As Integer, ByRef value As Integer</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>matchUVIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function matchUVIndex(mp As Ptr, ByRef pos As Integer, ByRef poly As X3Core.X3Polygon) As Boolean</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result As Boolean</SourceLine>
   <SourceLine>Dim tmpInt As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 91 then ' [</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchInteger(mp, pos, tmpInt)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 44 then ' ,</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly.UVIndex.Append tmpInt</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loop until (mp.Byte(pos) = 93) or not result ' ]</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mp As Ptr, ByRef pos As Integer, ByRef poly As X3Core.X3Polygon</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>matchColorPal</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function matchColorPal(mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model) As Boolean</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result As Boolean</SourceLine>
   <SourceLine>Dim tmpR As Double</SourceLine>
   <SourceLine>Dim tmpG As Double</SourceLine>
   <SourceLine>Dim tmpB As Double</SourceLine>
   <SourceLine>Dim tmpA As Double</SourceLine>
   <SourceLine>Dim c As X3Core.X3Color</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 91 then ' [</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpR)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpG)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpB)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpA)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 44 then ' ,</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>c = new X3Core.X3Color(tmpR, tmpG, tmpB, tmpA)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.ColorPal.Append c</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loop until (mp.Byte(pos) = 93) or not result ' ]</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>matchMaterial</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function matchMaterial(mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model) As Boolean</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result As Boolean</SourceLine>
   <SourceLine>Dim tmpR As Double</SourceLine>
   <SourceLine>Dim tmpG As Double</SourceLine>
   <SourceLine>Dim tmpB As Double</SourceLine>
   <SourceLine>Dim tmpA As Double</SourceLine>
   <SourceLine>Dim c As X3Core.X3Color</SourceLine>
   <SourceLine>Dim m As X3Core.X3Material</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 91 then ' [</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m = new X3Core.X3Material</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' ===== AMBIENT =====================================</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpR)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpG)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpB)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpA)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m.Ambient.Red = tmpR</SourceLine>
   <SourceLine>m.Ambient.Green = tmpG</SourceLine>
   <SourceLine>m.Ambient.Blue = tmpB</SourceLine>
   <SourceLine>m.Ambient.Alpha = tmpA</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' ===== DIFFUSE =====================================</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpR)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpG)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpB)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpA)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m.Diffuse.Red = tmpR</SourceLine>
   <SourceLine>m.Diffuse.Green = tmpG</SourceLine>
   <SourceLine>m.Diffuse.Blue = tmpB</SourceLine>
   <SourceLine>m.Diffuse.Alpha = tmpA</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' ===== SPECULAR =====================================</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpR)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpG)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpB)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpA)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m.Specular.Red = tmpR</SourceLine>
   <SourceLine>m.Specular.Green = tmpG</SourceLine>
   <SourceLine>m.Specular.Blue = tmpB</SourceLine>
   <SourceLine>m.Specular.Alpha = tmpA</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpR)</SourceLine>
   <SourceLine>m.Shininess = tmpR</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 44 then ' ,</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.Material.Append m</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loop until (mp.Byte(pos) = 93) or not result ' ]</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>matchVIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function matchVIndex(mp As Ptr, ByRef pos As Integer, ByRef poly As X3Core.X3Polygon) As Boolean</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result As Boolean</SourceLine>
   <SourceLine>Dim tmpInt As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 91 then ' [</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchInteger(mp, pos, tmpInt)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 44 then ' ,</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly.VIndex.Append tmpInt</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loop until (mp.Byte(pos) = 93) or not result ' ]</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mp As Ptr, ByRef pos As Integer, ByRef poly As X3Core.X3Polygon</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>matchNormal</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function matchNormal(mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model) As Boolean</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result As Boolean</SourceLine>
   <SourceLine>Dim tmpX As Double</SourceLine>
   <SourceLine>Dim tmpY As Double</SourceLine>
   <SourceLine>Dim tmpZ As Double</SourceLine>
   <SourceLine>Dim n As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 91 then ' [</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpX)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpY)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpZ)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 44 then ' ,</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>n = new X3Core.X3Vector(tmpX, tmpY, tmpZ)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.Normal.Append n</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loop until (mp.Byte(pos) = 93) or not result ' ]</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>matchUVMap</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function matchUVMap(mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model) As Boolean</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result As Boolean</SourceLine>
   <SourceLine>Dim tmpU As Double</SourceLine>
   <SourceLine>Dim tmpV As Double</SourceLine>
   <SourceLine>Dim uv As X3Core.X3UVCoordinate</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 91 then ' [</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpU)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpV)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 44 then ' ,</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>uv = new X3Core.X3UVCoordinate(tmpU, tmpV)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.UVMap.Append uv</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loop until (mp.Byte(pos) = 93) or not result ' ]</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>matchVertex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function matchVertex(mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model) As Boolean</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result As Boolean</SourceLine>
   <SourceLine>Dim tmpX As Double</SourceLine>
   <SourceLine>Dim tmpY As Double</SourceLine>
   <SourceLine>Dim tmpZ As Double</SourceLine>
   <SourceLine>Dim v As X3Core.X3Vector</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 91 then ' [</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpX)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpY)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1 ' skip past comma</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchDouble(mp, pos, tmpZ)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 44 then ' ,</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>v = new X3Core.X3Vector(tmpX, tmpY, tmpZ)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>model.Vertex.Append v</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loop until (mp.Byte(pos) = 93) or not result ' ]</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mp As Ptr, ByRef pos As Integer, ByRef model As X3Core.X3Model</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>matchVNIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function matchVNIndex(mp As Ptr, ByRef pos As Integer, ByRef poly As X3Core.X3Polygon) As Boolean</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim result As Boolean</SourceLine>
   <SourceLine>Dim tmpInt As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = false</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 91 then ' [</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result = matchInteger(mp, pos, tmpInt)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mp.Byte(pos) = 44 then ' ,</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>poly.VNIndex.Append tmpInt</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loop until (mp.Byte(pos) = 93) or not result ' ]</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mp As Ptr, ByRef pos As Integer, ByRef poly As X3Core.X3Polygon</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>skipValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub skipValue(mp As Ptr, ByRef pos As Integer)</SourceLine>
   <SourceLine>' www.Xojo3D.com</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim count As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' ***** decimal value? *****</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if ((mp.Byte(pos) &gt;= 48) and (mp.Byte(pos) &lt;= 57)) or (mp.Byte(pos) = 46)  or (mp.Byte(pos) = 45) then ' string value?</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>while ((mp.Byte(pos) &gt;= 48) and (mp.Byte(pos) &lt;= 57)) or (mp.Byte(pos) = 46)  or (mp.Byte(pos) = 45)</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' ***** JSON object *****</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif mp.Byte(pos) = 123 then ' {</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>count = 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if (mp.Byte(pos) = 123) then ' {</SourceLine>
   <SourceLine>count = count + 1</SourceLine>
   <SourceLine>elseif (mp.Byte(pos) = 125) then ' }</SourceLine>
   <SourceLine>count = count - 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loop until (mp.Byte(pos) = 125) and (count &lt;= 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' ***** string value *****</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif mp.Byte(pos) = 34 then ' "</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>loop until mp.Byte(pos) = 34</SourceLine>
   <SourceLine>pos = pos  + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' ***** array *****</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif mp.Byte(pos) = 91 then ' [</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>count = 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if (mp.Byte(pos) =  91) then ' [</SourceLine>
   <SourceLine>count = count + 1</SourceLine>
   <SourceLine>elseif (mp.Byte(pos) = 93) then ' ]</SourceLine>
   <SourceLine>count = count - 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>loop until (mp.Byte(pos) = 93) and (count &lt;= 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>break ' shouldn't break here... what are we missing?</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' skip white space</SourceLine>
   <SourceLine>while mp.Byte(pos) &lt;= 32</SourceLine>
   <SourceLine>pos = pos + 1</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>mp As Ptr, ByRef pos As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
<block type="UIState" ID="0">
 <StudioWindowState>
  <Editors>
   <EditorCount>1</EditorCount>
   <Editor>
    <EditorIndex>0</EditorIndex>
    <EditorLocation></EditorLocation>
    <EditorPath></EditorPath>
   </Editor>
   <SelectedTab>0</SelectedTab>
  </Editors>
 </StudioWindowState>
</block>
</RBProject>
